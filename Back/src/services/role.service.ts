import { Repository, EntityManager } from 'typeorm';
import { AppDataSource } from '../config/app-data-source';
import { s_role } from '../entities/s_role.entity';
import { s_role_permis_action } from '../entities/s_role_permis_action.entity';
import { s_role_permis_menu } from '../entities/s_role_permis_menu.entity';
import { ApiResponse } from '../models/api-response.model';
import * as lang from '../utils/LangHelper';
import * as validate from '../utils/ValidationUtils';
import { s_menu } from '../entities/s_menu.entity';
import { s_menu_action } from '../entities/s_menu_action.entity';
import { s_action } from '../entities/s_action.entity';
import {RoleModel, RoleCreateModel, RoleUpdateModel, mapToRoleModel}  from '../models/role.model';
import { DataSanitizer } from '../utils/DataSanitizer';
import { mapToRoleMenuModel , RoleMenuModel } from '../models/role_menu.model';
import { MenuRouteModel } from '../models/menu_route.model';
import { promises } from 'dns';
import { MenuActionModel } from '../models/menu_action.model';
import * as genum from '../common/global.enum';

export class RoleService {
    private roleRepository: Repository<s_role>;
    private rolePermisMenuRepository: Repository<s_role_permis_menu>;
    private rolePermisActionRepository: Repository<s_role_permis_action>;
    private menuRepository: Repository<s_menu>;
    private menuActionRepository: Repository<s_menu_action>

    constructor() {
        this.roleRepository = AppDataSource.getRepository(s_role);
        this.rolePermisMenuRepository = AppDataSource.getRepository(s_role_permis_menu);
        this.rolePermisActionRepository = AppDataSource.getRepository(s_role_permis_action);
        this.menuRepository = AppDataSource.getRepository(s_menu);
        this.menuActionRepository = AppDataSource.getRepository(s_menu_action);
    }

    async create(
        data: Partial<RoleCreateModel>,
        manager?: EntityManager
    ): Promise<ApiResponse<any>> {
        let response = new ApiResponse<RoleModel>();
        const operation = 'RoleService.create';
    
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Transaction
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }
    
        try {
            const repository = manager ? useManager.getRepository(s_role) : this.roleRepository;
    
            // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `permission_menus` ‡∏Å‡πà‡∏≠‡∏ô ***
            if (!Array.isArray(data.permission_menus) || data.permission_menus.length === 0) {
                throw new Error(lang.msgRequired('field.permission_menus'));
            }
    
             // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ menu_id ‡πÅ‡∏•‡∏∞ action_code ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            for (const menu of data.permission_menus) {
                console.log("üîç Checking menu existence:", menu.menu_id);
                const menuEntity = await useManager.getRepository(s_menu).findOne({ where: { menu_id: menu.menu_id } });
                if (!menuEntity) {
                    console.error(`‚ùå Menu ID ${menu.menu_id} not found!`);
                    throw new Error(lang.msgNotFound(`Menu ID ${menu.menu_id} not found`));
                }

                for (const actionCode of menu.permission_actions) {
                    const menuActionEntity = await useManager
                        .getRepository(s_menu_action)
                        .findOne({ where: { menu_id: menu.menu_id, action_code: actionCode } });
                    if (!menuActionEntity) {
                        throw new Error(
                            lang.msgErrorFormat(`Action Code ${actionCode} is not valid for Menu ID ${menu.menu_id}`)
                        );
                    }
                }
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
            if (validate.isNullOrEmpty(data.role_code)) {
                throw new Error(lang.msgRequired('field.role_code'));
            }
            if (await this.checkRoleCodeExists(data.role_code!)) {
                throw new Error(lang.msgAlreadyExists('field.role_code'));
            }
            if (validate.isNullOrEmpty(data.role_name)) {
                throw new Error(lang.msgRequired('field.role_name'));
            }
            if (validate.isNullOrEmpty(data.create_by)) {
                throw new Error(lang.msgRequiredCreateby());
            }
    
            // *** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `role_code` ‡πÉ‡∏ô `s_role` ***
            console.log("üìù Creating Role:", data.role_code);
            const role = repository.create(data);
            const savedData = await repository.save(role);
            console.log("‚úÖ Role Created:", savedData);
            
            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å permission_menus
            try {
                await this.savePermissions(savedData.role_code, data.permission_menus!, useManager);
            } catch (error) {
                await repository.delete({ role_code: savedData.role_code });
                throw new Error(lang.msgErrorFunction('savePermissions', (error as Error).message));
            }

            // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á permission_menus ‡∏ó‡∏µ‡πà‡∏°‡∏µ action
            const filteredMenus = data.permission_menus.filter(menu => menu.permission_actions.length > 0);

            // ‚úÖ ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö
            response = response.setComplete(lang.msgSuccessAction('created', 'item.role'), {
                ...savedData,
                permission_menus: filteredMenus,
            });
    
            if (!manager && queryRunner) {
                console.log("üîÑ Rolling back transaction...");
                try {
                    await queryRunner.rollbackTransaction();
                    console.log("‚ö†Ô∏è Transaction rolled back successfully!");
                } catch (err) {
                    console.error("‚ùå Error rolling back transaction:", err);
                }
            }
            
    
            return response;
    
        } catch (error: any) {
            if (!manager) {
                await queryRunner?.rollbackTransaction();
            }
            console.error('Error during role creation:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            if (!manager) {
                await queryRunner?.release();
            }
        }
    }
    
    async update(
        role_code: string,
        data: Partial<RoleUpdateModel>,
        manager?: EntityManager // ‡∏£‡∏±‡∏ö parameter manager ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    ): Promise<ApiResponse<any>> {
        let response = new ApiResponse<RoleModel>();
        const operation = 'RoleService.update';
    
        // ‡πÉ‡∏ä‡πâ QueryRunner ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô transaction
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }
    
        try {
            const repository = manager ? useManager.getRepository(s_role) : this.roleRepository;
    
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            const existingRole = await repository.findOneBy({ role_code });
            if (!existingRole) {
                return response.setIncomplete(lang.msgNotFound('item.role'));
            }
    
            // *** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ***
            if (validate.isNullOrEmpty(data.update_by)) {
                throw new Error(lang.msgRequiredUpdateby());
            }
    
            if (validate.isNullOrEmpty(data.role_name)) {
                throw new Error(lang.msgRequired('field.role_name'));
            }
    
            if (data.permission_menus && data.permission_menus.length > 0) {
                for (const menu of data.permission_menus) {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö menu_id
                    const menuEntity = await useManager.getRepository(s_menu).findOne({ where: { menu_id: menu.menu_id } });
                    if (!menuEntity) {
                        throw new Error(lang.msgNotFound(`Menu ID ${menu.menu_id} not found`));
                    }
    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö action_code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö menu_id
                    for (const actionCode of menu.permission_actions) {
                        const menuActionEntity = await useManager
                            .getRepository(s_menu_action)
                            .findOne({ where: { menu_id: menu.menu_id, action_code: actionCode } });
                        if (!menuActionEntity) {
                            throw new Error(
                                lang.msgErrorFormat(`Action Code ${actionCode} is not valid for Menu ID ${menu.menu_id}`)
                            );
                        }
                    }
                }
            }
    
            console.log('Before existingRole : ', existingRole);
    
            // *** ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Role ***
            Object.assign(existingRole, data, {
                update_date: new Date(),
            });
    
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
            await repository.save(existingRole);
    
            // ‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á permissionMenus ‡πÉ‡∏´‡∏°‡πà
            await this.clearPermissions(role_code, useManager);
            await this.savePermissions(role_code, data.permission_menus!, useManager);
    
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Role ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
            const dataResponse = await this.getByRoleCode(role_code, useManager);
    
            if (!dataResponse.isCompleted) {
                throw new Error(dataResponse.message);
            }
    
            response = response.setComplete(lang.msgSuccessAction('updated', 'item.role'), dataResponse.data!);
    
            // ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ï transaction ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if (!manager) {
                await queryRunner?.commitTransaction();
            }
    
            return response;
        } catch (error: unknown) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö transaction ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if (!manager) {
                await queryRunner?.rollbackTransaction();
            }
            console.error('Error during role edit:', errorMessage);
            throw new Error(lang.msgErrorFunction(operation, errorMessage));
        } finally {
            // ‡∏õ‡∏¥‡∏î queryRunner ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if (!manager) {
                await queryRunner?.release();
            }
        }
    }
    
    async delete(role_code: string, manager?: EntityManager): Promise<ApiResponse<any>> {
        const response = new ApiResponse<void>();
        const operation = 'RoleService.delete';
    
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á QueryRunner ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Transaction ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }

        try {

            const repository =  manager ? useManager.getRepository(s_role): this.roleRepository;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role_code ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const existingRole = await repository.findOneBy({ role_code });
            if (!existingRole) {
                return response.setIncomplete(lang.msgNotFound('item.role'));
            }

            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• permission menus ‡πÅ‡∏•‡∏∞ actions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö role
            await this.clearPermissions(role_code, useManager);

            // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role
            await repository.remove(existingRole);

            response.setComplete(lang.msgSuccessAction('deleted', 'item.role'));

            // ‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ï Transaction ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if (!manager && queryRunner) {
                await queryRunner.commitTransaction();
            }

            return response;

        } catch (error: any) {
            // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö transaction ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if (!manager) {
                await queryRunner?.rollbackTransaction();
            }
            console.error('Error during role deletion:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            // ‡∏õ‡∏¥‡∏î queryRunner ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á manager ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if (!manager && queryRunner) {
                await queryRunner.release();
            }
        }
    }

    async search(role_code?: string, name?: string): Promise<ApiResponse<s_role[]>> {
        let response = new ApiResponse<s_role[]>();
        const operation = 'RoleService.search';

        try {
            const query = this.roleRepository.createQueryBuilder('role');

            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ role_code ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ role_code
            if (validate.isNotNullOrEmpty(role_code)) {
                query.andWhere('role.role_code LIKE :role_code', { role_code: `%${role_code}%` });
            }

            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ name ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ name
            if (validate.isNotNullOrEmpty(name)) {
                query.andWhere('role.role_name LIKE :name', { name: `%${name}%` });
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ
            const roles = await query.getMany();
            if (roles.length === 0) {
                return response.setIncomplete(lang.msgNotFound('item.role'));
            }

            return response.setComplete(lang.msgFound('item.role'), roles);

        } catch (error: any) {
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }


    private async savePermissions(
        role_code: string,
        permissionMenus: { menu_id: number; permission_actions: string[] }[],
        transactionManager: EntityManager
    ): Promise<void> {
    
        const operation = 'RoleService.savePermissions';
    
        try {
            console.log('permissionMenus : ', permissionMenus);
    
            // ‡∏î‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getParentMenusRecursively ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å service getMenuByPermission
            const getParentMenusRecursively = async (parentMenuIds: number[], menuRepository: Repository<s_menu>): Promise<any[]> => {
                if (parentMenuIds.length === 0) return [];
    
                const parentMenus = await menuRepository.createQueryBuilder('m')
                    .select([
                        'm.menu_id as menu_id',
                        'm.menu_name as menu_name',
                        'm.menu_route as menu_route',
                        'm.menu_key as menu_key',
                        'm.menu_component as menu_component',
                        'm.parent_menu_id as parent_menu_id'
                    ])
                    .where('m.menu_id IN (:...parentMenuIds)', { parentMenuIds })
                    .getRawMany();
    
                let nextParentMenuIds = parentMenus
                    .filter(item => item.parent_menu_id)
                    .map(item => item.parent_menu_id);
    
                nextParentMenuIds = [...new Set(nextParentMenuIds)];
    
                const nextParentMenus = await getParentMenusRecursively(nextParentMenuIds, menuRepository);
    
                return [...parentMenus, ...nextParentMenus];
            };
    
            // Set ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
            const savedMenuIds = new Set<number>();
    
            if (permissionMenus && permissionMenus.length > 0) {
                for (const menu of permissionMenus) {
                    const menuEntity = await transactionManager.getRepository(s_menu).findOne({ where: { menu_id: menu.menu_id } });
                    if (!menuEntity) {
                        throw new Error(lang.msgDataNotFound());
                    }
    
                    // ‡∏î‡∏∂‡∏á parent_menu_id ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                    const parentMenus = await getParentMenusRecursively([menu.menu_id], transactionManager.getRepository(s_menu));
                    const allMenus = [menuEntity, ...parentMenus];  // ‡∏£‡∏ß‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞ parent menus
    
                    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞ parent menus
                    for (const menuItem of allMenus) {
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                        if (!savedMenuIds.has(menuItem.menu_id)) {
                            const rolePermisMenu = new s_role_permis_menu();
                            rolePermisMenu.role_code = role_code;
                            rolePermisMenu.menu_id = menuItem.menu_id;
                            console.log('rolePermisMenu : ', rolePermisMenu);
                            await transactionManager.getRepository(s_role_permis_menu).save(rolePermisMenu);
    
                            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å menu_id ‡∏•‡∏á‡πÉ‡∏ô Set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
                            savedMenuIds.add(menuItem.menu_id);
    
                            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å permission_actions ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
                            if (menuItem.menu_id === menu.menu_id && menu.permission_actions.length > 0) {
                                for (const actionCode of menu.permission_actions) {
                                    const rolePermisAction = new s_role_permis_action();
    
                                    const actionEntity = await transactionManager.getRepository(s_action).findOne({ where: { action_code: actionCode } });
                                    if (!actionEntity) {
                                        throw new Error(lang.msgDataNotFound());
                                    }
    
                                    rolePermisAction.rpm_id = rolePermisMenu.rpm_id;
                                    rolePermisAction.action_code = actionEntity.action_code;
                                    console.log('rolePermisAction : ', rolePermisAction);
                                    await transactionManager.getRepository(s_role_permis_action).save(rolePermisAction);
                                }
                            }
                        }
                    }
                }
            }
        } catch (error: any) {
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }
    
        
    private async clearPermissions(role_code: string, manager: EntityManager): Promise<void> {
        const operation = 'RoleService.clearPermissions';

        try {
            // ‡∏•‡∏ö permission actions ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö menus
            const permissionMenus = await manager.getRepository(s_role_permis_menu).find({ where: { role_code } });
            for (const menu of permissionMenus) {
                await manager.getRepository(s_role_permis_action).delete({ rpm_id: menu.rpm_id });
            }

            // ‡∏•‡∏ö permission menus
            await manager.getRepository(s_role_permis_menu).delete({ role_code });
        } catch (error: any) {
            console.error('Error during clearPermissions:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     * @param role_code ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
     * @returns ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false
     */
    async checkRoleCodeExists(role_code: string): Promise<boolean> {
        const count = await this.roleRepository.count({ where: { role_code: role_code } });
        return count > 0; 
    }
    // Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ role ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ role_code ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    async codeExists(role_code: string): Promise<ApiResponse<boolean>> {
        let response = new ApiResponse<boolean>();
        const operation = 'RoleService.codeExists';

        try {
            const status = await this.checkRoleCodeExists(role_code);
            let message = "";
            if (status == true) {
                message = lang.msgAlreadyExists('field.role_code');
            }
            else{
                message = lang.msgNotFound('field.role_code');
            }

            return response.setComplete(message, status);

        } catch (error: any) {
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }

    async getByRoleCode(role_code: string, manager?: EntityManager): Promise<ApiResponse<RoleModel>> {
        let response = new ApiResponse<RoleModel>();
        const operation = 'RoleService.getByRoleCode';
    
        if (!role_code) {
            return response.setIncomplete(lang.msgInvalidParameter());
        }
    
        try {
            const repository = manager ? manager.getRepository(s_role) : this.roleRepository;

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role ‡πÅ‡∏•‡∏∞ permission ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            const rawData = await repository.createQueryBuilder('role')
                .leftJoin('s_role_permis_menu', 'rpm', 'role.role_code = rpm.role_code')
                .leftJoin('s_role_permis_action', 'rpa', 'rpm.rpm_id = rpa.rpm_id')
                .select([
                    'role.role_code as role_code',
                    'role.role_name as role_name',
                    'role.role_description as role_description',
                    'role.role_is_active as role_is_active',
                    'rpm.menu_id as menu_id',
                    'rpa.action_code as action_code'
                ])
                .where('role.role_code = :role_code', { role_code })
                .getRawMany();
    
            if (!rawData || rawData.length === 0) {
                return response.setIncomplete(lang.msgNotFound('item.role'));
            }
            
    
            // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mapping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô ViewModel
            const roleViewModel = mapToRoleModel(rawData);
            //let roleViewModel: Partial<RoleModel> = DataSanitizer.fromObject<RoleModel>(rawData, RoleModel);

            return response.setComplete(lang.msgFound('item.role'), roleViewModel);    
    
        } catch (error: any) {
            console.error('Error during getByRoleCode:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }
    
    async getPermissionByRole(role_code: string, manager?: EntityManager): Promise<ApiResponse<RoleMenuModel>> {
        let response = new ApiResponse<RoleMenuModel>();
        const operation = 'RoleService.getPermissionByRole';
    
        if (!role_code) {
            return response.setIncomplete(lang.msgInvalidParameter());
        }
    
        try {
            const repository = manager ? manager.getRepository(s_role) : this.roleRepository;
    
            // Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const rawData = await repository.createQueryBuilder('role')
                .leftJoin('s_role_permis_menu', 'rpm', 'role.role_code = rpm.role_code')
                .leftJoin('s_role_permis_action', 'rpa', 'rpm.rpm_id = rpa.rpm_id')
                .leftJoin('s_menu', 'm', 'rpm.menu_id = m.menu_id')
                .leftJoin('s_action', 'a', 'rpa.action_code = a.action_code')
                .select([
                    'role.role_code as role_code',
                    'role.role_name as role_name',
                    'role.role_description as role_description',
                    'role.role_is_active as role_is_active',
                    'rpm.menu_id as menu_id',
                    'm.menu_name as menu_name',
                    'm.menu_seq as menu_seq',
                    'm.parent_menu_id as parent_menu_id',
                    'm.menu_is_active as menu_is_active',
                    'm.menu_route as menu_route',
                    'm.menu_key as menu_key',
                    'm.menu_icon as menu_icon',
                    'm.menu_component as menu_component',
                    'rpa.rpa_id as menuact_id',
                    'rpa.action_code as action_code',
                    'a.action_name as action_name'
                ])
                .where('role.role_code = :role_code', { role_code })
                .getRawMany();
    
            if (rawData.length === 0) {
                return response.setIncomplete(lang.msgNotFound('item.role'));
            }
    
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mapping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const modelData = mapToRoleMenuModel(rawData);
            console.log('modelData : ', modelData);
            return response.setComplete(lang.msgFound('item.menu'), modelData);
    
        } catch (error: any) {
            console.error('Error during getPermissionByRole:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }
    
    async getParentMenusRecursively(parentMenuIds: number[], menuRepository: Repository<s_menu>): Promise<any[]> {
        if (parentMenuIds.length === 0) return []; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ parent_menu_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö parentMenuIds
        const parentMenus = await menuRepository.createQueryBuilder('m')
            .select([
                'm.menu_id as menu_id',
                'm.menu_name as menu_name',
                'm.menu_route as menu_route',
                'm.menu_key as menu_key',
                'm.menu_component as menu_component',
                'm.parent_menu_id as parent_menu_id'
            ])
            .where('m.menu_id IN (:...parentMenuIds)', { parentMenuIds })
            .getRawMany();
    
        // ‡∏î‡∏∂‡∏á parent_menu_id ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ (‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ parent_menu_id)
        let nextParentMenuIds = parentMenus
            .filter(item => item.parent_menu_id)  // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ parent_menu_id
            .map(item => item.parent_menu_id);    // ‡πÄ‡∏Å‡πá‡∏ö parent_menu_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    
        // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡πÉ‡∏ô nextParentMenuIds
        nextParentMenuIds = [...new Set(nextParentMenuIds)];
    
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (recursive) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        const nextParentMenus = await this.getParentMenusRecursively(nextParentMenuIds, menuRepository);
    
        // ‡∏£‡∏ß‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏û‡πà‡∏≠‡πÅ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        return [...parentMenus, ...nextParentMenus];
    }

    // ‡∏õ‡∏£‡∏±‡∏ö ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ ‡πÉ‡∏´‡πâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å parent menu ‡πÉ‡∏ô permission ‡∏î‡πâ‡∏ß‡∏¢
    async getMenuByPermission(role_code: string, manager?: EntityManager): Promise<ApiResponse<MenuRouteModel[]>> {
        let response = new ApiResponse<MenuRouteModel[]>();
        const operation = 'RoleService.getMenuByPermission';
    
        if (!role_code) {
            return response.setIncomplete(lang.msgInvalidParameter());
        }
    
        try {
            const repository = manager ? manager.getRepository(s_role) : this.roleRepository;
    
            // Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å s_role_permis_menu ‡πÅ‡∏•‡∏∞ s_menu
            const rawData: any[] = await repository.createQueryBuilder('role')
                .leftJoin('s_role_permis_menu', 'rpm', 'role.role_code = rpm.role_code')
                .leftJoin('s_menu', 'm', 'rpm.menu_id = m.menu_id')
                .select([
                    'm.menu_id as menu_id',
                    'm.parent_menu_id as parent_menu_id',
                    'm.menu_level as menu_level',
                    'm.menu_seq as menu_seq',
                    'm.menu_name as menu_name',
                    'm.menu_key as menu_key',
                    'm.menu_route as menu_route'
                ])
                .where('role.role_code = :role_code', { role_code }) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö alias ‡∏Ç‡∏≠‡∏á role
                .andWhere('m.menu_is_active = 1') // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö alias ‡∏Ç‡∏≠‡∏á m
                .orderBy('m.menu_seq')
                .getRawMany();

    
            // console.log('Raw Data:', rawData); // Debug raw data
    
            if (rawData.length === 0) {
                return response.setIncomplete(lang.msgNotFound('item.role'));
            }
    
            // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NewMenuRouteModel
            const finalMenus = this.mapToNewMenuRouteModel(rawData);
    
            // console.log('Final Menus:', finalMenus); // Debug final menus
    
            return response.setComplete(lang.msgFound('item.menu'), finalMenus);
        } catch (error: any) {
            console.error('Error during getMenuByPermission:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mapToNewMenuRouteModel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    private mapToNewMenuRouteModel(rawData: any[]): MenuRouteModel[] {
        const menuMap = new Map<number, MenuRouteModel>();
    
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô MenuRouteModel ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        rawData.forEach(menu => {
            const menuItem: MenuRouteModel = {
                type: '',  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
                key: menu.menu_key,
                name: menu.menu_name,
                menu_id: menu.menu_id.toString(),
                route: menu.menu_route || undefined,
                noCollapse: true,  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢
                collapse: []
            };
            menuMap.set(menu.menu_id, menuItem);
            // console.log("Added menu item to menuMap:", menuItem); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô map
        });
    
        // console.log("menuMap:", menuMap); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô menuMap
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏° parent_menu_id
        const menuTree: MenuRouteModel[] = [];
        // console.log("Initial menuTree:", menuTree); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á menuTree
    
        rawData.forEach(menu => {
            const parentMenuId = menu.parent_menu_id;
            const menuItem = menuMap.get(menu.menu_id);
            // console.log("Processing menu:", menu); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    
            if (!menuItem) {
                console.log("MenuItem not found, skipping:", menu.menu_id); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö menuItem
                return;
            }
    
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (parent_menu_id ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ 0)
            if (parentMenuId === null || parentMenuId === 0) {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ parent)
                menuTree.push(menuItem);
                // console.log("Added to root menuTree:", menuItem); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô root tree
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢
                const parentMenu = menuMap.get(parentMenuId);
                if (parentMenu) {
                    parentMenu.type = 'collapse';
                    parentMenu.noCollapse = false;
    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ collapse ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏õ‡∏•‡πà‡∏≤
                    if (!parentMenu.collapse) {
                        parentMenu.collapse = [];
                    }
    
                    parentMenu.collapse.push(menuItem);
                    // console.log("Added to parent collapse:", parentMenu); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢
                } else {
                    console.log("Parent menu not found for menuId:", menu.menu_id); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö parent menu
                }
            }
        });
    
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        function setMenuType(menuList: MenuRouteModel[]) {
            // console.log("menuList:", menuList); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô menuMap
            menuList.forEach(menu => {
                if (menu.collapse && menu.collapse.length > 0) {
                    menu.type = 'collapse';
                    setMenuType(menu.collapse);  // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢
                } else {
                    menu.type = 'item';
                }
                // console.log("Menu type set:", menu); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ type
            });
        }
    
        setMenuType(menuTree);
        // console.log("Final menuTree:", menuTree); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á tree
        return menuTree;
    }
    
    async getPermissionAction(role_code: string, menu_id: number, manager?: EntityManager): Promise<ApiResponse<MenuActionModel>> {
        let response = new ApiResponse<MenuActionModel>();
        const operation = 'RoleService.getPermissionAction';

        if (!role_code || !menu_id) {
            return response.setIncomplete("Invalid parameters");
        }

        try {
            const repository = manager ? manager.getRepository(s_role) : this.roleRepository;

            const rawData = await repository.createQueryBuilder('role')
                .leftJoin('s_role_permis_menu', 'rpm', 'role.role_code = rpm.role_code')
                .leftJoin('s_role_permis_action', 'rpa', 'rpm.rpm_id = rpa.rpm_id')
                .leftJoin('s_menu_action', 'ma', 'ma.menu_id = rpm.menu_id')
                .select([
                    'ma.action_code AS action_code',  // ‡∏î‡∏∂‡∏á action_code ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    'rpa.action_code AS permission_action_code'  // ‡∏î‡∏∂‡∏á action_code ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                ])
                .where('role.role_code = :role_code', { role_code })
                .andWhere('rpm.menu_id = :menu_id', { menu_id })
                .getRawMany();

            if (rawData.length === 0) {
                return response.setIncomplete(lang.msgNotFound('item.menu'));
            }

            // ‡∏î‡∏∂‡∏á action_code ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å s_menu_action
            const allActions = rawData.map(item => item.action_code);

            // ‡∏î‡∏∂‡∏á action_code ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å s_role_permis_action
            const allowedActions = rawData
                .filter(item => item.permission_action_code !== null)  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ action ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
                .map(item => item.permission_action_code);

            // Loop 
            let permission_actions: Record<string, boolean> = {};
            for (const action of allActions) {
                permission_actions[action] = allowedActions.includes(action);
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á MenuActionModel ‡πÅ‡∏•‡∏∞ Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            const actionModel = new MenuActionModel(role_code, menu_id, permission_actions);

            // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
            return response.setComplete("Actions found", actionModel); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å [actionModel] ‡πÄ‡∏õ‡πá‡∏ô actionModel
        } catch (error: any) {
            console.error('Error during getPermissionAction:', error.message);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        }
    }

}
