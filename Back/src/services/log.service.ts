// log.service.ts

import { AppDataSource } from '../config/app-data-source';
import { Log } from '../entities/s_log.entity';
import { m_log_inb_outb } from '../entities/m_log_inb_outb.entity';
import { LessThan } from 'typeorm';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export class LogService {
  private logRepository = AppDataSource.getRepository(Log);
  private transactionLogRepo = AppDataSource.getRepository(m_log_inb_outb);

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   * @param level ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á Log (info, warn, error, ‡∏Ø‡∏•‡∏Ø)
   * @param message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Log
   * @param operation ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
   * @param username ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
   */
  async logToDatabase(
    level: string,
    message: string,
    operation: string,
    username?: string
  ) {
    try {
      const log = new Log();
      log.level = level;
      log.message = message;
      log.operation = operation || 'N/A';
      log.username = username || 'system';'';
      log.timestamp = new Date();

      await this.logRepository.save(log); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      console.log('Log saved successfully');
    } catch (error) {
      console.error('Failed to log to database:', error);
    }
  }

  /**
   * ‡∏•‡∏ö Log ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏ß‡∏±‡∏ô
   */
  async deleteOldLogs(LessThanDay:number=30) {
    try {
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - LessThanDay);

      const deleteResult = await this.logRepository.delete({
        timestamp: LessThan(thirtyDaysAgo),
      });

      console.log(`Old logs deleted successfully! Total deleted: ${deleteResult.affected}`);
    } catch (error) {
      console.error('Error deleting old logs:', error);
    }
  }

  /**
   * üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö INBOUND & OUTBOUND)
   */
  async logTransaction(
    log_type: string,
    log_ctgy: string,
    log_action: string,
    ref_id: number,
    transaction_data: any | null = null,
    username: string = 'system'
  ): Promise<m_log_inb_outb> {  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å void ‡πÄ‡∏õ‡πá‡∏ô m_log_inb_outb
    try {
      const logEntry = new m_log_inb_outb();
      logEntry.log_type = log_type;
      logEntry.log_ctgy = log_ctgy;
      logEntry.log_action = log_action;
      logEntry.ref_id = ref_id;
      logEntry.transaction_data = transaction_data;
      logEntry.username = username;
      logEntry.timestamp = new Date(); // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

      const savedLog = await this.transactionLogRepo.save(logEntry); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
      console.log('‚úÖ Log saved successfully:', savedLog);

      return savedLog; // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Log ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error('‚ùå Failed to log to database:', error);
      throw new Error('Failed to save transaction log');
    }
  }


  


}



