import { Repository, EntityManager, SelectQueryBuilder, In } from 'typeorm';
import { AppDataSource } from '../config/app-data-source';
import { ApiResponse } from '../models/api-response.model';
import * as lang from '../utils/LangHelper'; // Import LangHelper for specific functions
import cron from 'node-cron';

import { getIO } from '../services/socket.service'; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å import io

import { m_outb_raw_material } from '../entities/m_outb_raw_material.entity';
import { m_outb_finished_goods } from '../entities/m_outb_finished_goods.entity';
import { m_inb_raw_material } from '../entities/m_inb_raw_material.entity';
import { m_inb_finished_goods } from '../entities/m_inb_finished_goods.entity';
import { m_outb_semi } from '../entities/m_outb_semi.entity';
import { m_notifications } from '../entities/m_notifications.entity';
import { m_outb_tooling } from '../entities/m_outb_tooling.entity';
import { m_outb_finished_goods_items } from '../entities/m_outb_finished_goods_items.entity';
import { m_outb_semi_items } from '../entities/m_outb_semi_items.entity';
import { m_outb_tooling_items } from '../entities/m_outb_tooling_items.entity';
import { m_outb_raw_material_items } from '../entities/m_outb_raw_material_items.entity';
import { m_inb_semi } from '../entities/m_inb_semi.entity';
import { m_inb_tooling } from '../entities/m_inb_tooling.entity';
import { m_finished_goods_ifm } from '../entities/m_finished_goods_ifm.entity';
import { m_tooling_ifm } from '../entities/m_tooling_ifm.entity';
import { m_semi_ifm } from '../entities/m_semi_ifm.entity';
import { m_raw_material_ifm } from '../entities/m_raw_material_ifm.entity';
import { m_criteria } from '../entities/m_criteria.entity';
import { m_bom_items } from '../entities/m_bom_items.entity';
import { s_user_notification } from '../entities/s_user_notification.entity';
import { s_user } from '../entities/s_user.entity';

import { ApprovalStatus, NotifStatus, NotifType, NotiLevel, RefType, ReturnStatus } from '../common/global.enum';
import { getUsersToNotify } from '../utils/NotificationsUtils';

// ‚úÖ Mapping ‡∏ï‡∏≤‡∏£‡∏≤‡∏á reference ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
export const tables: Record<string, { alias: string; entity: any; codeField: string; detailsField: string; approveField: string }> = {
    outbsemi: { alias: "outbsemi", entity: m_outb_semi, codeField: "outbsemi_code", detailsField: "outbsemi_details", approveField: "outbsemi_appr_status" },
    outbfg: { alias: "outbfg", entity: m_outb_finished_goods, codeField: "outbfg_code", detailsField: "outbfg_details", approveField: "outbfg_appr_status" },
    outbrm: { alias: "outbrm", entity: m_outb_raw_material, codeField: "outbrm_code", detailsField: "outbrm_details", approveField: "outbrm_appr_status" },
    outbtl: { alias: "outbtl", entity: m_outb_tooling, codeField: "outbtl_code", detailsField: "outbtl_details", approveField: "outbtl_appr_status" }
};

export class NotifApprovalService {
    private inbrmRepository: Repository<m_inb_raw_material>;
    private inbfgRepository: Repository<m_inb_finished_goods>;
    private outbrmRepository: Repository<m_outb_raw_material>;
    private outbfgRepository: Repository<m_outb_finished_goods>; 
    private outbsemiRepository: Repository<m_outb_semi>
    private outbtlRepository: Repository<m_outb_tooling>;
    private notifRepository: Repository<m_notifications>
    private criteriaRepo: Repository<m_criteria>;
    private userRepository: Repository<s_user>;
    private usernotifRepo: Repository<s_user_notification>;
    private repoMap: Record<string, Repository<any>>;

    constructor(){
        this.inbrmRepository = AppDataSource.getRepository(m_inb_raw_material);
        this.inbfgRepository = AppDataSource.getRepository(m_inb_finished_goods);
        this.outbrmRepository = AppDataSource.getRepository(m_outb_raw_material);
        this.outbfgRepository = AppDataSource.getRepository(m_outb_finished_goods);
        this.outbsemiRepository = AppDataSource.getRepository(m_outb_semi);
        this.outbtlRepository = AppDataSource.getRepository(m_outb_tooling);
        this.notifRepository = AppDataSource.getRepository(m_notifications);
        this.criteriaRepo = AppDataSource.getRepository(m_criteria);
        this.userRepository = AppDataSource.getRepository(s_user);
        this.usernotifRepo = AppDataSource.getRepository(s_user_notification);

        // ‚úÖ ‡πÉ‡∏ä‡πâ `repoMap` ‡πÅ‡∏ó‡∏ô `this[`${reference_type}Repository`]` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        this.repoMap = {
            outbsemi: this.outbsemiRepository,
            outbfg: this.outbfgRepository,
            outbrm: this.outbrmRepository,
            outbtl: this.outbtlRepository
        } as const; // ‚úÖ ‡πÉ‡∏ä‡πâ `as const` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ TypeScript ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ

        const SYSTEM_USER_ID = -1;

         //console.log("‚úÖ node-cron ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");

    /*minimum stock*/
        // cron.schedule("*/10 * * * *", async () => {  //‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        cron.schedule("0 */2 * * *", async () => {
            console.log("‚è≥ Cron Job getNotiMinimumStock ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á -", new Date().toLocaleString());
            await this.getNotiMinimumStock(SYSTEM_USER_ID, undefined, true); // ‚úÖ ‡∏™‡πà‡∏á isFromCron = true
        });

    /*shelflife*/
        // cron.schedule("*/1 * * * *", async () => { 
        cron.schedule("0 10 * * *", async () => { 
            console.log("‚è≥ Cron Job getNotiShelfLife ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 10:00 ‡∏ô. -", new Date().toLocaleString());
            await this.getNotiShelfLife(SYSTEM_USER_ID, undefined, true); // ‚úÖ ‡∏™‡πà‡∏á isFromCron = true
        });

    /*clearOldNotifications*/
        // üîÅ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡πÄ‡∏ß‡∏•‡∏≤ 01:00
        cron.schedule('0 1 1 */3 *', async () => {
            console.log("üßπ Running scheduled clearOldNotifications (every 3 months)", new Date().toLocaleString());
            await this.clearOldNotifications(3);
        });

    
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤ READ ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    private shouldIncludeRead(showRead: boolean, notif_status: string): boolean {
        return showRead || notif_status === "UNREAD";
    }
    
    /*
     * service ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
     */
    async searchRequestApproval(
        user_id: number,
        filters?: { code?: string; details?: string; approvalStatus?: ApprovalStatus }, 
        showRead: boolean = true, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á `READ` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (true = ‡πÅ‡∏™‡∏î‡∏á READ, false = ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á)
        // maxDays: number = 30, // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 30 ‡∏ß‡∏±‡∏ô
        manager?: EntityManager
    ): Promise<ApiResponse<any | null>> {
        const response = new ApiResponse<any | null>();
        const operation = 'NotifApprovalService.searchRequestApproval';

        try {
            // ‚úÖ ‡πÉ‡∏ä‡πâ `manager` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ `this.notifRepository`
            const notifRepo = manager ? manager.getRepository(m_notifications) : this.notifRepository;

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `m_notifications` ‡∏ó‡∏µ‡πà‡∏°‡∏µ `notif_type = REQUEST_APPROVAL`
            const notifications = await notifRepo.createQueryBuilder('notif')
                .innerJoin('s_user_notification', 'userNotif', 'userNotif.notif_id = notif.notif_id AND userNotif.user_id = :user_id', { user_id })
                .select([
                    'notif.notif_id AS notif_id',
                    'userNotif.notif_status AS notif_status',
                    'notif.reference_id AS reference_id',
                    'notif.reference_type AS reference_type',
                    "DATE_FORMAT(notif.create_date, '%d %b %y') AS formatted_date", // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    "DATE_FORMAT(notif.create_date, '%H:%i:%s') AS formatted_time"    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
                ])
                .where('notif.notif_type = :notifType', { notifType: NotifType.REQUEST_APPROVAL })
                .getRawMany();

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ return ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if (notifications.length === 0) {
                return response.setIncomplete(lang.msgNotFound('notif.request_approval'));
            }

            let combinedData: any[] = [];

            // ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ `reference_type`
            for (const notif of notifications) {
                if (!this.shouldIncludeRead(showRead, notif.notif_status)) continue; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á READ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

                const reference_type = notif.reference_type?.toLowerCase() as keyof typeof tables; // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
                const tableInfo = tables[reference_type];

                if (!tableInfo) continue; // ‚úÖ ‡∏ñ‡πâ‡∏≤ `reference_type` ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö `tables` ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ

                const { alias, codeField, detailsField, approveField } = tableInfo;

                // ‚úÖ ‡πÉ‡∏ä‡πâ `manager` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ `repoMap`
                const repository = manager 
                    ? manager.getRepository(tableInfo.entity) 
                    : this.repoMap[reference_type] ?? null; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏ñ‡πâ‡∏≤ `reference_type` ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô `repoMap`

                if (!repository) {
                    console.warn(`‚ö†Ô∏è Warning: Repository for reference_type '${reference_type}' not found.`);
                    continue;
                }

                // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
                const query = repository.createQueryBuilder(alias)
                    .select([
                        `${alias}.${codeField} AS code`,
                        `${alias}.${detailsField} AS details`,
                        `${alias}.${approveField} AS is_approved`,
                        `'${reference_type}' AS type`
                    ])
                    .where(`${alias}_id = :referenceId`, { referenceId: notif.reference_id });

                // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if (filters) {
                    this.applyFilters(query, alias, codeField, detailsField, approveField, filters);
                }

                // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å reference table
                const record = await query.getRawOne();

                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ array
                if (record) {
                    //console.log(`üîé Found Record for notif_id=${notif.notif_id} - Alert Level: ${notif.alert_level}`);
                
                    combinedData.push({
                        notif_id: notif.notif_id,
                        notif_status: notif.notif_status,
                        id: notif.reference_id,
                        ...record,
                        date: notif.formatted_date,  
                        time: notif.formatted_time
                    });
                }
                
            }

            // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `code`
            const filteredData: any[] = Array.from(
                combinedData.reduce((map, record) => {
                    if (!map.has(record.code)) {
                        map.set(record.code, record);
                    }
                    return map;
                }, new Map<string, any>()).values()
            );

             // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ UNREAD ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô READ >>
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ approvalStatus (‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô statusOrder ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô)
            // ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
            const statusOrder: { [key in ApprovalStatus]: number } = {
                [ApprovalStatus.PENDING]: 1,
                [ApprovalStatus.APPROVED]: 2,
                [ApprovalStatus.REJECTED]: 3
            };
            
            filteredData.sort((a, b) => {
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ UNREAD ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô READ
                if (a.notif_status !== b.notif_status) return a.notif_status === "UNREAD" ? -1 : 1;
                
                // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ a.is_approved ‡πÅ‡∏•‡∏∞ b.is_approved ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ApprovalStatus key
                const approvalA = statusOrder[a.is_approved as keyof typeof statusOrder] || 0;
                const approvalB = statusOrder[b.is_approved as keyof typeof statusOrder] || 0;
                
                if (approvalA !== approvalB) return approvalA - approvalB;
                
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà)
                const dateA = new Date(a.date + " " + a.time).getTime();
                const dateB = new Date(b.date + " " + b.time).getTime();
                return dateA - dateB;
            });

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á ‡πÉ‡∏´‡πâ return ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (filteredData.length === 0) {
                return response.setIncomplete(lang.msgNotFound('notif.request_approval'));
            }

            // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö response
            return response.setComplete(lang.msgFound('notif.request_approval'), filteredData);
        } catch (error: any) {
            console.error(`‚ùå Error in ${operation}:`, error);
            return response.setIncomplete(`Error: ${error.message}`);
        }
    }

        // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö apply filters ‡πÉ‡∏ô query
        private applyFilters(
            query: SelectQueryBuilder<any>,  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó query
            alias: string,
            codeField: string,
            detailsField: string,
            approveField: string,
            filters?: { code?: string; details?: string; approvalStatus?: ApprovalStatus }
        ) {
            if (filters?.code) {
                query.andWhere(`${alias}.${codeField} LIKE :code`, { code: `%${filters.code}%` });
            }
            if (filters?.details) {
                query.andWhere(`${alias}.${detailsField} LIKE :details`, { details: `%${filters.details}%` });
            }
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á approvalStatus ‡∏°‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            if (filters?.approvalStatus !== undefined && filters?.approvalStatus !== null) {
                query.andWhere(`${alias}.${approveField} = :approvalStatus`, { approvalStatus: filters.approvalStatus });
            }           
        }
    
    /*
     *  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
     */
    async getApprovalDetails( 
        user_id: number,
        notif_id: number,                    // ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (notification id)
        manager?: EntityManager              // EntityManager ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ): Promise<ApiResponse<any | null>> {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ApiResponse ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        const response = new ApiResponse<any | null>();
        // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (debugging)
        const operation = "NotifApprovalService.getApprovalDetails";

        try {
            // Log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            //console.log(`üîç Fetching details for notif_id=${notif_id}`);

            // ‡πÉ‡∏ä‡πâ manager ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏∞‡πÉ‡∏ä‡πâ default manager ‡∏à‡∏≤‡∏Å AppDataSource
            const useManager = manager ?? AppDataSource.manager;
            // ‡∏î‡∏∂‡∏á Repository ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á m_notifications
            const notifRepo = useManager.getRepository(m_notifications);

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification: reference_type, reference_id, notif_status
            const notification = await notifRepo.createQueryBuilder("notif")
                .select([
                    "notif.reference_type AS notif_reference_type",
                    "notif.reference_id AS notif_reference_id",
                ])
                .where("notif.notif_id = :notif_id", { notif_id })
                .getRawOne();

            // Log ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ
            //console.log("üîé Retrieved notification data:", notification);

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á response ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (!notification) {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notif_id=${notif_id}`);
                return response.setIncomplete(lang.msgNotFound(`notif.${notif_id}`));
            }

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ reference_type ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö key ‡∏Ç‡∏≠‡∏á tables
            let reference_type = notification["notif_reference_type"]?.toLowerCase() as keyof typeof tables;
            let reference_id = notification["notif_reference_id"];
            // let notif_status = notification["notif_status"];

            // Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏ó‡∏ä‡πå reference_id ‡πÅ‡∏•‡∏∞ reference_type
            //console.log(`üîç Matched reference_id=${reference_id}, reference_type=${reference_type}`);

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ reference_id ‡πÅ‡∏•‡∏∞ reference_type ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!reference_id || !reference_type) {
                console.warn(`‚ö†Ô∏è notif_id=${notif_id} ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ reference_id=${reference_id}, reference_type=${reference_type}`);
                return response.setIncomplete(lang.msgNotFound(`notif.reference.${notif_id}`));
            }

            // ‡∏î‡∏∂‡∏á status ‡∏à‡∏≤‡∏Å s_user_notification ‡πÅ‡∏ó‡∏ô
            const userNotifRepo = useManager.getRepository(s_user_notification);
            const userNotif = await userNotifRepo.findOne({
                where: {
                    notif_id,
                    user_id,
                },
            });

            if (!userNotif) {
            return response.setIncomplete(lang.msgNotFound(`notif_user.${notif_id}`));
            }

            const notif_status = userNotif.notif_status;

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô READ
            if (notif_status === NotifStatus.UNREAD) {
            await userNotifRepo.update(
                { notif_id, user_id },
                { notif_status: NotifStatus.READ }
            );
            //console.log(`‚úÖ Updated notif_status to READ for notif_id=${notif_id} and user_id=${user_id}`);
            }

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏Å (reference tables)
            const tables = {
                outbfg: { 
                    entity: m_outb_finished_goods,    // entity ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö finished goods
                    alias: "outbfg",                  // alias ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô query
                    idField: "outbfg_id",             // field ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    codeField: "outbfg_code",         // field ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    detailsField: "outbfg_details",   // field ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    ifmIdField: "fgifm_id",           // field ‡∏£‡∏´‡∏±‡∏™ ifm ‡πÉ‡∏ô finished goods
                    ifmTable: m_finished_goods_ifm,   // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ifm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö finished goods
                    ifmAlias: "fgifm",                // alias ‡∏Ç‡∏≠‡∏á ifm
                    ifmNameField: "fgifm_name"         // field ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô ifm
                },
                outbsemi: { 
                    entity: m_outb_semi,
                    alias: "outbsemi",
                    idField: "outbsemi_id",
                    codeField: "outbsemi_code",
                    detailsField: "outbsemi_details",
                    ifmIdField: "semiifm_id",
                    ifmTable: m_semi_ifm,
                    ifmAlias: "semiifm",
                    ifmNameField: "semiifm_name"
                },
                outbtl: { 
                    entity: m_outb_tooling,
                    alias: "outbtl",
                    idField: "outbtl_id",
                    codeField: "outbtl_code",
                    detailsField: "outbtl_details",
                    ifmIdField: "tlifm_id",
                    ifmTable: m_tooling_ifm,
                    ifmAlias: "tlifm",
                    ifmNameField: "tlifm_name"
                },
                outbrm: { 
                    entity: m_outb_raw_material,
                    alias: "outbrm",
                    idField: "outbrm_id",
                    codeField: "outbrm_code",
                    detailsField: "outbrm_details",
                    ifmIdField: "rmifm_id",
                    ifmTable: m_raw_material_ifm,
                    ifmAlias: "rmifm",
                    ifmNameField: "rmifm_name"
                }
            };

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å (stock tables)
            const stockTables = {
                outbfg: { 
                    outbItemTable: m_outb_finished_goods_items,
                    inbTable: m_inb_finished_goods,
                    outbIdField: "outbfg_id",
                    inbIdField: "inbfg_id",
                    quantityFields: ["outbfgitm_quantity", "inbfg_quantity"],
                    inbCodeField: "inbfg_code"  // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö inbfg_code
                },
                outbsemi: { 
                    outbItemTable: m_outb_semi_items,
                    inbTable: m_inb_semi,
                    outbIdField: "outbsemi_id",
                    inbIdField: "inbsemi_id",
                    quantityFields: ["outbsemiitm_quantity", "inbsemi_quantity"],
                    inbCodeField: "inbsemi_code" // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö inbsemi_code
                },
                outbtl: { 
                    outbItemTable: m_outb_tooling_items,
                    inbTable: m_inb_tooling,
                    outbIdField: "outbtl_id",
                    inbIdField: "inbtl_id",
                    quantityFields: ["outbtlitm_quantity", "inbtl_quantity"],
                    inbCodeField: "inbtl_code"  // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö inbtl_code
                },
                outbrm: { 
                    outbItemTable: m_outb_raw_material_items,
                    inbTable: m_inb_raw_material,
                    outbIdField: "outbrm_id",
                    inbIdField: "inbrm_id",
                    quantityFields: ["outbrmitm_quantity", "inbrm_quantity"],
                    inbCodeField: "inbrm_code"  // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö inbrm_code
                }
            };
            
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏Å (reference) ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° reference_type
            const refInfo = tables[reference_type];
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° reference_type
            const stockInfo = stockTables[reference_type];

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á response ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (!refInfo || !stockInfo) {
                return response.setIncomplete(lang.msgNotFound(`reference_type.${reference_type}`));
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏≤‡∏° entity ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô outb_finished_goods, outb_semi, ...)
            const referenceData = await useManager.getRepository(refInfo.entity)
                .createQueryBuilder(refInfo.alias)
                .select([
                    `${refInfo.alias}.${refInfo.idField} AS id`,
                    `${refInfo.alias}.${refInfo.codeField} AS code`,
                    `${refInfo.alias}.${refInfo.detailsField} AS details`
                ])
                .where(`${refInfo.alias}.${refInfo.idField} = :reference_id`, { reference_id })
                .getRawOne();

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á response ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (!referenceData) {
                return response.setIncomplete(lang.msgNotFound(`item.${reference_type}`));
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select fields
            let selectFields = [
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                `outbItem.${stockInfo.inbIdField} AS inb_id`,
                `${refInfo.ifmAlias}.${refInfo.ifmNameField} AS ifm_name`,
                `inb.${stockInfo.quantityFields[1]} AS inb_quantity`,
                `outbItem.${stockInfo.quantityFields[0]} AS out_quantity`,
                // ‡∏î‡∏∂‡∏á inb code ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ifm name
                `CONCAT(inb.${stockInfo.inbCodeField}, ' ', ${refInfo.ifmAlias}.${refInfo.ifmNameField}) AS code_name`
            ];

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á query builder ‡∏à‡∏≤‡∏Å repository ‡∏Ç‡∏≠‡∏á outbItemTable
            let query = useManager.getRepository(stockInfo.outbItemTable)
                .createQueryBuilder("outbItem")
                // join ‡∏ï‡∏≤‡∏£‡∏≤‡∏á inb
                .leftJoin(stockInfo.inbTable, "inb", `inb.${stockInfo.inbIdField} = outbItem.${stockInfo.inbIdField}`)
                // join ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ifm (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á ifm_name)
                .leftJoin(refInfo.ifmTable, refInfo.ifmAlias, `${refInfo.ifmAlias}.${refInfo.ifmIdField} = inb.${refInfo.ifmIdField}`);

            // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ FG (outbfg) ‡πÅ‡∏•‡∏∞ RM (outbrm) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BOM
            if (reference_type === 'outbfg') {
                selectFields.push(`outbItem.bom_id AS bom_id`);
                selectFields.push(`bomItem.bom_number AS bom_number`);
                query.leftJoin(m_bom_items, "bomItem", "bomItem.bom_id = outbItem.bom_id");
            } else if (reference_type === 'outbrm') {
                // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RM ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ bom_number ‡∏à‡∏≤‡∏Å inb (inbrm_bom) ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ bom_id
                selectFields.push(`inb.inbrm_bom AS bom_number`);
            }

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î select fields ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç where
            query.select(selectFields)
                .where(`outbItem.${stockInfo.outbIdField} = :reference_id`, { reference_id });

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• raw ‡∏Ç‡∏≠‡∏á stock details
            const stockDetails = await query.getRawMany();

             // Map ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì remaining ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BOM ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ
            const processedStockDetails = stockDetails.map(item => {
                let bom = null;
                if (reference_type === 'outbfg' && item.bom_number) {
                    bom = { bom_id: item.bom_id, bom_number: item.bom_number };
                } else if (reference_type === 'outbrm' && item.bom_number) {
                    bom = { bom_number: item.bom_number };
                }
                return {
                    ...item,
                    remaining: (item.inb_quantity !== null && item.out_quantity !== null)
                        ? item.inb_quantity - item.out_quantity
                        : null,
                    bom: bom
                };
            });

            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á bomData ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å fetchBomData ‡∏≠‡∏µ‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
            // const bomData = await this.fetchBomData(reference_type, reference_id, useManager);
            // const itemsWithBom = processedStockDetails.map(item => ({
            //     ...item,
            //     bom: bomData // <-- ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ BOM ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å item
            // }));

            // ‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchBomData ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BOM ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
            const itemsWithBom = processedStockDetails;

            return response.setComplete(lang.msgFound(`details ${reference_type}`), { 
                ...referenceData, 
                items: itemsWithBom 
            });
        } catch (error: any) {
            console.error(`‚ùå Error in ${operation}:`, error);
            return response.setIncomplete(lang.msgErrorFunction(operation, error.message));
        }
    }

    /*
    * service ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
    */
    async approveRequest(
        notif_id: number,
        approvalStatus: ApprovalStatus,
        username: string,
        userId: number, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° userId ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        manager?: EntityManager
    ): Promise<ApiResponse<any>> {
        const response = new ApiResponse<any>();
        const operation = 'NotifApprovalService.approveRequest';
    
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }
    
        try {
            //console.log(`üîç Fetching details for notif_id=${notif_id}`);
    
            // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `reference_id` ‡πÅ‡∏•‡∏∞ `reference_type` ‡∏à‡∏≤‡∏Å `m_notifications`
            const notifRepo = useManager.getRepository(m_notifications);
            const notification = await notifRepo.createQueryBuilder("notif")
                .select([ 
                    "notif.reference_type AS reference_type",
                    "notif.reference_id AS reference_id",
                ])
                .where("notif.notif_id = :notif_id", { notif_id })
                .andWhere("notif.notif_type = :notif_type", { notif_type: NotifType.REQUEST_APPROVAL })
                .getRawOne();
    
            //console.log("üîé Retrieved notification data:", notification);
    
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `notification` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!notification) {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notif_id=${notif_id}`);
                return response.setIncomplete(lang.msgNotFound(`notif.${notif_id}`));
            }
            //‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ qeury ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ type
    
            // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ `reference_id` ‡πÅ‡∏•‡∏∞ `reference_type`
            let reference_type = notification["reference_type"]?.toLowerCase() as keyof typeof tables;
            let reference_id = notification["reference_id"];
    
            //console.log(`üîç Matched reference_id=${reference_id}, reference_type=${reference_type}`);
    
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            if (!reference_id || !reference_type) {
                console.warn(`‚ö†Ô∏è notif_id=${notif_id} ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ reference_id=${reference_id}, reference_type=${reference_type}`);
                return response.setIncomplete(lang.msgNotFound(`notif.reference.${notif_id}`));
            }
    
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ tableInfo ‡πÅ‡∏•‡∏∞ repository
            const tableInfo = tables[reference_type];
            if (!tableInfo) {
                return response.setIncomplete(lang.msgNotFound(`table.${reference_type}`));
            }
    
             // ‚úÖ ‡∏î‡∏∂‡∏á Repository ‡∏Ç‡∏≠‡∏á table ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            const repository = useManager.getRepository(tableInfo.entity);
            if (!repository) {
                return response.setIncomplete(lang.msgNotFound(`repository.${reference_type}`));
            }
    
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å field ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ approvalStatus (‡πÅ‡∏ï‡πà‡πÉ‡∏ô query ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ alias is_approved ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô)
            const record = await repository.createQueryBuilder(tableInfo.alias)
            .select([`${tableInfo.alias}.${tableInfo.approveField} AS is_approved`])
            .where(`${tableInfo.alias}_id = :id`, { id: reference_id })
            .getRawOne();
    
            if (!record) {
                return response.setIncomplete(lang.msgNotFound(`item.${reference_type}`));
            }
    
            const previousApprovalStatus: ApprovalStatus = record.is_approved;
            //console.log('previousApprovalStatus:', previousApprovalStatus);
            //console.log('new approvalStatus:', approvalStatus);
    
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å approve ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if (previousApprovalStatus === ApprovalStatus.APPROVED && approvalStatus === ApprovalStatus.APPROVED) {
                return response.setIncomplete(lang.msg("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"));
            }

            // ‚úÖ **‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å `REJECTED` ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô**
            if (previousApprovalStatus === ApprovalStatus.REJECTED) {
                return response.setIncomplete(lang.msg(`item:${reference_type} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å REJECTED ‡πÑ‡∏î‡πâ`));
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `withdr_count` ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô `PENDING`
            if (approvalStatus === ApprovalStatus.PENDING) {
                const withdrawFieldMap: Record<string, { table: any; alias: string; field: string; foreignKey: string }> = {
                    outbfg: { table: m_outb_finished_goods_items, alias: "outbfgitm", field: "outbfgitm_withdr_count", foreignKey: "outbfg_id" },
                    outbsemi: { table: m_outb_semi_items, alias: "outbsemiitm", field: "outbsemiitm_withdr_count", foreignKey: "outbsemi_id" },
                    outbrm: { table: m_outb_raw_material_items, alias: "outbrmitm", field: "outbrmitm_issued_count", foreignKey: "outbrm_id" }
                };

                 // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©: outbtl ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ return_status ‡πÄ‡∏õ‡πá‡∏ô NOT_RETURNED ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                if (reference_type === "outbtl") {
                    const toolingRecord = await useManager.getRepository(m_outb_tooling)
                        .createQueryBuilder("tool")
                        .select("tool.outbtl_return_status", "return_status")
                        .where("tool.outbtl_id = :id", { id: reference_id })
                        .getRawOne();

                    const returnStatus = toolingRecord?.return_status;

                    if (!returnStatus || returnStatus !== ReturnStatus.NOT_RETURNED) {
                        return response.setIncomplete(lang.msg("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß"));
                    }
                }

                 // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö withdrawFieldMap ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                if (withdrawFieldMap[reference_type]) {
                    const { table, alias, field, foreignKey } = withdrawFieldMap[reference_type];

                    // ‚úÖ SUM ‡∏Ñ‡πà‡∏≤ withdr_count ‡∏Ç‡∏≠‡∏á outbfgitm / outbsemiitm / outbrmitm
                    const withdrCountResult = await useManager.getRepository(table)
                        .createQueryBuilder(alias)
                        .select(`SUM(${alias}.${field}) AS withdr_count`)
                        .where(`${alias}.${foreignKey} = :id`, { id: reference_id })
                        .getRawOne();

                    const withdrCount = withdrCountResult?.withdr_count ?? 0;

                    if (withdrCount > 0) {
                        return response.setIncomplete(lang.msg(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`));
                    }
                }
            }

            //console.log('record.approval_status === approvalStatus', record.approval_status === approvalStatus); 

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ table ‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå update_date ‡πÅ‡∏•‡∏∞ update_by ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const columns = repository.metadata.columns.map(c => c.propertyName);
            const updateFields: any = { [tableInfo.approveField]: approvalStatus };
    
            if (columns.includes('update_date')) {
                updateFields.update_date = new Date();
            }
            if (columns.includes('update_by')) {
                updateFields.update_by = username;
            }
    
            //console.log('Fields to update:', updateFields); // ‚úÖ Debug ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
    
    
            // ‡∏ï‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
            // ‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:
            // - ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô APPROVED ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà APPROVED => ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å
            // - ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô APPROVED ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà APPROVED => ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
            // - ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á PENDING ‡∏Å‡∏±‡∏ö REJECTED => ‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
            const stockResponse = await this.adjustStock(
                reference_type,
                reference_id,
                previousApprovalStatus,
                approvalStatus,
                useManager
            );
    
            // ‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠
            if (!stockResponse.isCompleted) {
                console.warn("‚ö†Ô∏è Stopping approval process due to insufficient stock!");
                return stockResponse;
            }

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await repository.createQueryBuilder(tableInfo.alias)
                .update()
                .set(updateFields)
                .where(`${tableInfo.alias}_id = :id`, { id: reference_id })
                .execute();
            // ‚úÖ Commit Transaction
            if (!manager && queryRunner) {
                await queryRunner.commitTransaction();
            }

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà notif_type ‡πÄ‡∏õ‡πá‡∏ô REQUEST_APPROVAL ‡πÅ‡∏•‡∏∞ reference_type ‡πÄ‡∏õ‡πá‡∏ô OUTBTL
            if (
                approvalStatus === ApprovalStatus.APPROVED &&
                reference_type === "outbtl" // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ RefType.OUTBTL
            ) {
                try {
                await this.processToolingNotificationAfterApproval(reference_id, username, useManager);
                } catch (error) {
                console.error("‚ùå Error processing tooling approval notification:", error);
                }
            }
            
            return response.setComplete(
                lang.msg(
                    approvalStatus === ApprovalStatus.APPROVED
                    ? "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
                    : approvalStatus === ApprovalStatus.REJECTED
                    ? "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß"
                    : approvalStatus === ApprovalStatus.PENDING
                    ? "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
                    : "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                ),
                { id: reference_id, type: reference_type, approvalStatus }
            );
    
        } catch (error: any) {
            if (!manager && queryRunner) {
                await queryRunner.rollbackTransaction();
            }
            console.error('Error during update operation:', error);
            throw new Error(lang.msgErrorFunction(operation, error.message));
        } finally {
            if (!manager && queryRunner) {
                await queryRunner.release();
            }
        }
    }
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Transaction)
        private async adjustStock(
            reference_type: string,
            outbId: number,
            previousApprovalStatus: ApprovalStatus,
            newApprovalStatus: ApprovalStatus,
            manager: EntityManager
        ): Promise<ApiResponse<any>> {  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ return `null` ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠
            //console.log(`üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Type: ${reference_type}, ID: ${outbId}, previousApprovalStatus: ${previousApprovalStatus}, newApprovalStatus: ${newApprovalStatus}`);
            const response = new ApiResponse<any>();
        
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å APPROVED ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô APPROVED ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
            if (
                (previousApprovalStatus !== ApprovalStatus.APPROVED && newApprovalStatus !== ApprovalStatus.APPROVED) ||
                ( (previousApprovalStatus === ApprovalStatus.PENDING || previousApprovalStatus === ApprovalStatus.REJECTED) &&
                (newApprovalStatus === ApprovalStatus.PENDING || newApprovalStatus === ApprovalStatus.REJECTED) )
            ) {
                //console.log("üîπ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö APPROVED");
                return response.setComplete(lang.msg("stock.no_change"), { reference_type, outbId, approvalStatus: newApprovalStatus });
            }
        
            // Mapping ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Dynamic
            const stockTables: Record<string, { outbItemTable: any, inbTable: any, inbField: string, outbField: string, inbIdField: string, outbIdField: string }> = {
                outbfg: { outbItemTable: m_outb_finished_goods_items, inbTable: m_inb_finished_goods, inbField: "inbfg_quantity", outbField: "outbfgitm_quantity", inbIdField: "inbfg_id", outbIdField: "outbfg_id" },
                outbsemi: { outbItemTable: m_outb_semi_items, inbTable: m_inb_semi, inbField: "inbsemi_quantity", outbField: "outbsemiitm_quantity", inbIdField: "inbsemi_id", outbIdField: "outbsemi_id" },
                outbtl: { outbItemTable: m_outb_tooling_items, inbTable: m_inb_tooling, inbField: "inbtl_quantity", outbField: "outbtlitm_quantity", inbIdField: "inbtl_id", outbIdField: "outbtl_id" },
                outbrm: { outbItemTable: m_outb_raw_material_items, inbTable: m_inb_raw_material, inbField: "inbrm_quantity", outbField: "outbrmitm_quantity", inbIdField: "inbrm_id", outbIdField: "outbrm_id" }
            };
        
            const stockInfo = stockTables[reference_type];
            if (!stockInfo) {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reference_type: ${reference_type}`);
                return response.setIncomplete(lang.msgNotFound(`stock.${reference_type}`));
            }
        
            const { outbItemTable, inbTable, inbField, outbField, inbIdField, outbIdField } = stockInfo;
        
            const outbItemRepo = manager.getRepository(outbItemTable);
            const inbRepo = manager.getRepository(inbTable);
        
            try {
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• outb_items
                const outbItems = await outbItemRepo.createQueryBuilder("outbItem")
                    .select([`outbItem.${inbIdField} AS inb_id`, `outbItem.${outbField} AS quantity`])
                    .where(`outbItem.${outbIdField} = :outbId`, { outbId })
                    .getRawMany();
        
                if (!outbItems || outbItems.length === 0) {
                    console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Outb ID: ${outbId}`);
                    return response.setIncomplete(lang.msgNotFound(`stock_items: ${reference_type}`));
                }
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                // for (const item of outbItems) {
                //     const inb_id = Number(item["inb_id"]);
                //     const quantity = Number(item["quantity"]);
        
                //     if (!inb_id || quantity <= 0) {
                //         console.error(`‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á inb_id=${inb_id}, quantity=${quantity}`);
                //         return response.setIncomplete(`Data error: inb_id=${inb_id}, quantity=${quantity}`);
                //     }
        
                //     console.log(`üîπ ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å: inb_id=${inb_id}, quantity=${quantity}, newApprovalStatus=${newApprovalStatus}`);
        
                //     // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô APPROVED (‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà APPROVED) ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å
                //     // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å item ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏¢‡∏≠‡∏î
                //     if (newApprovalStatus === ApprovalStatus.APPROVED && previousApprovalStatus !== ApprovalStatus.APPROVED) {
                //         const inbStockCheck = await inbRepo.createQueryBuilder("inb")
                //             .select([`inb.${inbIdField} AS inb_id`, `inb.${inbField} AS stock_quantity`])
                //             .where(`inb.${inbIdField} IN (:...inbIds)`, { inbIds: outbItems.map(item => item.inb_id) })
                //             .getRawMany();

                //         // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                //         const stockMap = new Map(inbStockCheck.map(stock => [stock.inb_id, stock.stock_quantity]));

                        
                //         // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                //         for (const item of outbItems) {
                //             const inb_id = Number(item["inb_id"]);
                //             const quantity = Number(item["quantity"]);
                //             const stockAvailable = stockMap.get(inb_id) ?? 0;

                //             if (stockAvailable < quantity) {
                //                 console.warn(`‚ö†Ô∏è ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠! inb_id=${inb_id}, ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ${stockAvailable}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${quantity}`);
                //                 return response.setIncomplete(lang.msg(`field.quantity_not_enough`));
                //             }
                //         }

                //         // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
                //         for (const item of outbItems) {
                //             const inb_id = Number(item["inb_id"]);
                //             const quantity = Number(item["quantity"]);

                //             await inbRepo.createQueryBuilder()
                //                 .update()
                //                 .set({ [inbField]: () => `${inbField} - ${quantity}` })
                //                 .where(`${inbIdField} = :inbId`, { inbId: inb_id })
                //                 .execute();
                //         }
                //     }

                //     // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô APPROVED ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà APPROVED ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
                //     else if (previousApprovalStatus === ApprovalStatus.APPROVED && newApprovalStatus !== ApprovalStatus.APPROVED) {
                //         await inbRepo.createQueryBuilder()
                //             .update()
                //             .set({ [inbField]: () => `${inbField} + ${quantity}` })
                //             .where(`${inbIdField} = :inbId`, { inbId: inb_id })
                //             .execute();
                //     }
                //     // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á PENDING ‡∏Å‡∏±‡∏ö REJECTED ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
                //     else {
                //         console.log(`üîπ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö inb_id=${inb_id} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å ${previousApprovalStatus} ‡πÄ‡∏õ‡πá‡∏ô ${newApprovalStatus}`);
                //     }
                // }

                // ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î quantity ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á inb_id ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                const requiredStockMap = new Map<number, number>();

                for (const item of outbItems) {
                    const inb_id = Number(item["inb_id"]);
                    const quantity = Number(item["quantity"]);

                    if (!requiredStockMap.has(inb_id)) {
                        requiredStockMap.set(inb_id, 0);
                    }
                    requiredStockMap.set(inb_id, requiredStockMap.get(inb_id)! + quantity);
                }

                if (newApprovalStatus === ApprovalStatus.APPROVED && previousApprovalStatus !== ApprovalStatus.APPROVED) {
                    const inbStockCheck = await inbRepo.createQueryBuilder("inb")
                        .select([`inb.${inbIdField} AS inb_id`, `inb.${inbField} AS stock_quantity`])
                        .where(`inb.${inbIdField} IN (:...inbIds)`, { inbIds: Array.from(requiredStockMap.keys()) })
                        .getRawMany();

                    const stockMap = new Map(inbStockCheck.map(stock => [stock.inb_id, stock.stock_quantity]));

                    for (const [inb_id, requiredQty] of requiredStockMap.entries()) {
                        const stockAvailable = stockMap.get(inb_id) ?? 0;

                        if (stockAvailable < requiredQty) {
                            console.warn(`‚ö†Ô∏è ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠! inb_id=${inb_id}, ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ${stockAvailable}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${requiredQty}`);
                            return response.setIncomplete(lang.msg(`field.quantity_not_enough`)); 
                        }
                    }

                   // ‚úÖ ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á
                    for (const [inb_id, requiredQty] of requiredStockMap.entries()) {
                        //console.log(`üìâ Updating stock for inb_id=${inb_id}, required=${requiredQty}`);

                        await inbRepo.createQueryBuilder()
                            .update()
                            .set({ [inbField]: () => `${inbField} - ${requiredQty}` })
                            .where(`${inbIdField} = :inbId`, { inbId: inb_id })
                            .execute();

                        //console.log(`‚úÖ Stock updated for inb_id=${inb_id}`);
                    }

                }

                else if (previousApprovalStatus === ApprovalStatus.APPROVED && newApprovalStatus !== ApprovalStatus.APPROVED) {
                    for (const [inb_id, returnedQty] of requiredStockMap.entries()) {
                        await inbRepo.createQueryBuilder()
                            .update()
                            .set({ [inbField]: () => `${inbField} + ${returnedQty}` })
                            .where(`${inbIdField} = :inbId`, { inbId: inb_id })
                            .execute();
                    }
                }
        
                //console.log(`‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
                return response.setComplete(lang.msg(`stock.updated.${reference_type}`), { reference_type, outbId, approvalStatus: newApprovalStatus });
        
            } catch (error: any) {
                //console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å: ${error.message}`);
                return response.setIncomplete(lang.msgErrorFunction('adjustStock', error.message));
            }
        }
        
        //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô outbound tooling ‡∏ó‡∏∏‡∏Å userid ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        private async processToolingNotificationAfterApproval(
            reference_id: number,
            username: string,
            manager: EntityManager
        ): Promise<void> {
        
            // üîç ‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥)
            const existingNotif = await this.notifRepository.findOne({
                where: {
                    reference_type: RefType.OUTBTL,
                    reference_id,
                    notif_type: NotifType.TOOL_WITHDRAWAL,
                },
            });
        
            if (existingNotif) {
                await this.usernotifRepo.delete({ notif_id: existingNotif.notif_id });
                await this.notifRepository.delete({ notif_id: existingNotif.notif_id });
            }
        
            // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á noti ‡πÉ‡∏´‡∏°‡πà
            const newNotif = await this.notifRepository.save({
                notif_type: NotifType.TOOL_WITHDRAWAL,
                reference_type: RefType.OUTBTL,
                reference_id,
                create_by: username,
                create_date: new Date(),
            });
        
            // ‚úÖ ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            const userIds = await getUsersToNotify(
                NotifType.TOOL_WITHDRAWAL,
                this.userRepository,
                manager
            );
        
            const userNotiData = userIds.map((uid) => ({
                notif_id: newNotif.notif_id,
                user_id: uid,
                notif_status: NotifStatus.UNREAD,
            }));
        
            if (userNotiData.length > 0) {
                await this.usernotifRepo.insert(userNotiData);
            }
        
            // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô WebSocket
            getIO().emit("new-notification", {
                notif_type: NotifType.TOOL_WITHDRAWAL,
                reference_type: RefType.OUTBTL,
                reference_id,
                create_date: new Date(),
            });
        
            console.log(`üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô TOOL_WITHDRAWAL ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${userIds.length} users ‡πÅ‡∏•‡πâ‡∏ß`);
        }
        

    /*
    * service ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• outbound tooling ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢ query ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    * isFromCron = true ‚Üí Cron Job ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Üí ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô notif_status
    * isFromCron = false ‚Üí Frontend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Üí ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô notif_status ‡πÄ‡∏õ‡πá‡∏ô READ
    */
    async getNotiOutbTLIsAppr(userId: number, manager?: EntityManager): Promise<ApiResponse<{ newAdded: number, details: any[] }>> {
        let response = new ApiResponse<{ newAdded: number, details: any[] }>();
        const operation = 'NotifApprovalService.getNotiOutbTLIsAppr';
    
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }
    
        try {
            //console.log("üîç Checking approved Outbound Tooling for notifications...");
    
            const outbToolingRepo = useManager.getRepository(m_outb_tooling);
            const userNotifRepo = useManager.getRepository(s_user_notification);
            
            const notifRepo = useManager.getRepository(m_notifications);
            const outbToolingItemRepo = useManager.getRepository(m_outb_tooling_items);
            const inbToolingRepo = useManager.getRepository(m_inb_tooling);
            const toolingIFMRepo = useManager.getRepository(m_tooling_ifm);
    
            // ‚úÖ Step 1: Fetch approved outbtl_id from `m_outb_tooling`
            const approvedOutbTooling = await outbToolingRepo.createQueryBuilder("outbtl")
                .select([
                    "outbtl.outbtl_id AS outbtl_id",
                    "outbtl.outbtl_code AS outbtl_code",
                    "outbtl.outbtl_details AS outbtl_details"
                ])
                .where("outbtl.outbtl_appr_status = :approvalStatus", { approvalStatus: ApprovalStatus.APPROVED })
                .getRawMany();        
    
            const approvedIds = approvedOutbTooling.map(row => row.outbtl_id);
            //console.log(`‚úÖ Approved outbtl_ids found: ${approvedIds.length > 0 ? approvedIds.join(", ") : "None"}`);
    
            // ‚úÖ Step 2: ‡∏î‡∏∂‡∏á noti ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
            const userNotifs = await userNotifRepo.createQueryBuilder("user_notif")
                .innerJoin(m_notifications, "notif", "notif.notif_id = user_notif.notif_id")
                .select([
                    "user_notif.notif_id AS notif_id",
                    "notif.reference_id AS reference_id",
                    "user_notif.notif_status AS notif_status",
                    "DATE_FORMAT(notif.create_date, '%d %b %y') AS formatted_date",
                    "DATE_FORMAT(notif.create_date, '%H:%i:%s') AS formatted_time"
                ])
                .where("notif.notif_type = :notifType", { notifType: NotifType.TOOL_WITHDRAWAL })
                .andWhere("user_notif.user_id = :userId", { userId })
                .orderBy("notif.create_date", "DESC")
                .getRawMany();

            const existingNotifIds = new Set(userNotifs.map(n => n.reference_id));
        
            // ‚úÖ Step 2.5: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï notif_status = READ ‡πÉ‡∏ô s_user_notification ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ô‡∏µ‡πâ
            const notifIds = userNotifs.map((n) => n.notif_id);

            if (notifIds.length > 0) {
            await userNotifRepo.createQueryBuilder()
                .update()
                .set({ notif_status: NotifStatus.READ })
                .where("notif_id IN (:...notifIds) AND user_id = :userId AND notif_status = :status", {
                notifIds,
                userId: userId,
                status: NotifStatus.UNREAD
                })
                .execute();

            //console.log(`üìñ Marked notifications as READ for user_id=${userId}`);
            }


            // ‚úÖ Step 3: Determine new and removed notifications
            const newNotifIds = approvedIds.filter(id => !existingNotifIds.has(id));
            const removedNotifIds = [...existingNotifIds].filter(id => !approvedIds.includes(id));
    
            //console.log(`üÜï New notifications to insert: ${newNotifIds.length}`);
            //console.log(`üóëÔ∏è Notifications to remove: ${removedNotifIds.length}`);    
    
            let newAdded = 0;
            let details: any[] = [];
            
            // ‚úÖ Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á noti ‡πÉ‡∏´‡∏°‡πà
            if (newNotifIds.length > 0) {
                const newNotis = newNotifIds.map(id => ({
                    notif_type: NotifType.TOOL_WITHDRAWAL,
                    reference_type: RefType.OUTBTL,
                    reference_id: id,
                    create_by: "system",
                    create_date: new Date(),
                }));

                const inserted = await notifRepo.createQueryBuilder().insert().values(newNotis).execute();
                const insertedNotifIds = inserted.identifiers.map((n) => n.notif_id);

                // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á user_notif ‡πÉ‡∏´‡πâ user ‡∏ô‡∏µ‡πâ
                const userNotifData = insertedNotifIds.map(notif_id => ({
                    notif_id,
                    user_id: userId,
                    notif_status: NotifStatus.UNREAD,
                }));

                await userNotifRepo.insert(userNotifData);
                newAdded = insertedNotifIds.length;
            
                //console.log("‚úÖ New notifications inserted:", newAdded);
            }
    
             // ‚úÖ Step 5: ‡∏•‡∏ö noti ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
            if (removedNotifIds.length > 0) {
                // ‡∏î‡∏∂‡∏á notif_id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
                const toRemove = await notifRepo.createQueryBuilder("notif")
                    .select(["notif.notif_id"])
                    .where("notif.reference_id IN (:...ids)", { ids: removedNotifIds })
                    .andWhere("notif.notif_type = :type", { type: NotifType.TOOL_WITHDRAWAL })
                    .getMany();

                const notifIdsToRemove = toRemove.map(n => n.notif_id);

                await userNotifRepo.delete({ user_id: userId, notif_id: In(notifIdsToRemove) });
                await notifRepo.delete({ notif_id: In(notifIdsToRemove) });
            }
    
             // ‚úÖ Step 6: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            for (const notif of userNotifs) {
                // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ outbtlData ‡∏à‡∏≤‡∏Å approvedOutbTooling ‡∏ó‡∏µ‡πà‡∏°‡∏µ outbtl_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö reference_id ‡∏Ç‡∏≠‡∏á notif
                const outbtlData = approvedOutbTooling.find(o => o.outbtl_id === notif.reference_id);

                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö outbtlData ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Outbound Tooling ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                if (!outbtlData) continue;

                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å m_outb_tooling_items ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö outbtl_id ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                const outbtlItems = await outbToolingItemRepo.createQueryBuilder("outbtlitm")
                    .select([
                        "outbtlitm.outbtlitm_id AS outbtlitm_id", 
                        "outbtlitm.inbtl_id AS inbtl_id"
                    ])
                    .where("outbtlitm.outbtl_id = :outbtlId", { outbtlId: notif.reference_id })
                    .getRawMany();

                // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• outbtlItems (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Item ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Outbound Tooling)
                for (const item of outbtlItems) {
                    // ‡∏î‡∏∂‡∏á tlifm_id ‡∏à‡∏≤‡∏Å m_inb_tooling ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ inbtl_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å outbtlItems
                    const inbtlData = await inbToolingRepo.createQueryBuilder("inbtl")
                        .select(["inbtl.tlifm_id AS tlifm_id"])
                        .where("inbtl.inbtl_id = :inbtlId", { inbtlId: item.inbtl_id })
                        .getRawOne();

                    // ‡∏ñ‡πâ‡∏≤ inbtlData ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                    if (!inbtlData) continue;

                    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ tlifm_name ‡∏à‡∏≤‡∏Å m_tooling_ifm ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ tlifm_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å m_inb_tooling
                    const finishedGoodsData = await toolingIFMRepo.createQueryBuilder("tlifm")
                        .select(["tlifm.tlifm_name AS tlifm_name"])
                        .where("tlifm.tlifm_id = :tlifmId", { tlifmId: inbtlData.tlifm_id })
                        .getRawOne();

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ details ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                    details.push({
                        notif_id: notif.notif_id,
                        outbtl_id: notif.reference_id,
                        notif_status: notif.notif_status,
                        date: notif.formatted_date,
                        time: notif.formatted_time,
                        code: outbtlData.outbtl_code,
                        details: outbtlData.outbtl_details,
                        outbtlitm_id: item.outbtlitm_id,
                        name: finishedGoodsData ? finishedGoodsData.tlifm_name : null
                    });
                }
            }

            // ‚úÖ Step 7: Commit Transaction
            if (!manager && queryRunner) {
                await queryRunner.commitTransaction();
            }
    
            return response.setComplete(lang.msgFound("notif.tool_withdrawal"), { newAdded, details });
    
        } catch (error: any) {
            if (!manager && queryRunner) {
                await queryRunner.rollbackTransaction();
            }
            console.error(`‚ùå Error in ${operation}:`, error);
            return response.setIncomplete(lang.msgErrorFunction(operation, error.message));
        } finally {
            if (!manager && queryRunner) {
                await queryRunner.release();
            }
        }
    }    

    /*
    * service ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• minimum stock ‡πÇ‡∏î‡∏¢ query ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
    * isFromCron = true ‚Üí Cron Job ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Üí ‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô notif_status
    * isFromCron = false ‚Üí Frontend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Üí ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô notif_status ‡πÄ‡∏õ‡πá‡∏ô READ
    */
    async getNotiMinimumStock(userId: number, manager?: EntityManager, isFromCron: boolean = false): Promise<ApiResponse<{ newAdded: number, details: any[] }>> {
        let response = new ApiResponse<{ newAdded: number, details: any[] }>();
        const operation = 'NotifApprovalService.getNotiMinimumStock';
    
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }
    
        try {
            const userNotifRepo = useManager.getRepository(s_user_notification);
            //console.log("üîç Checking minimum stock for notifications...");
            
            // ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            const lowStockItems = await this.fetchLowStockItems(useManager);
    
            let newAdded = 0;
    
            // ‚úÖ 2. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            for (const item of lowStockItems) {
                const isNewNotificationAdded = await this.processStockNotification(useManager, item);
                if (isNewNotificationAdded) newAdded++;
            }
    
            // ‚úÖ 3. ‡∏î‡∏∂‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà)
            const allNotifs = await this.fetchAllNotifications(useManager, userId);
    
             // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `notif_status` ‡πÄ‡∏õ‡πá‡∏ô `READ` (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ frontend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ)
            if (!isFromCron) {
                const notifIds = allNotifs.map(n => n.notif_id);
                if (notifIds.length > 0) {
                    await userNotifRepo.createQueryBuilder()
                        .update()
                        .set({ notif_status: NotifStatus.READ })
                        .where("notif_id IN (:...notifIds) AND user_id = :userId AND notif_status = :status", {
                            notifIds,
                            userId,
                            status: NotifStatus.UNREAD
                        })
                        .execute();
                    //console.log(`üìñ Marked ${notifIds.length} notifications as READ for user_id=${userId}`);
                }
            }

            if (!manager && queryRunner) {
                await queryRunner.commitTransaction();
            }

            return response.setComplete(lang.msgFound("notif.minimum_stock"), { newAdded, details: allNotifs });
    
        } catch (error: any) {
            if (!manager && queryRunner) {
                await queryRunner.rollbackTransaction();
            }
            console.error(`‚ùå Error in ${operation}:`, error);
            return response.setIncomplete(lang.msgErrorFunction(operation, error.message));
        } finally {
            if (!manager && queryRunner) {
                await queryRunner.release();
            }
        }
    }
    
        
        //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå
        private async fetchLowStockItems(manager: EntityManager) {
            const tables = {
                inbrm: { repo: manager.getRepository(m_inb_raw_material), alias: "inbrm", ifmField: "rmifm_id", ifmTable: "m_raw_material_ifm", idField: "inbrm_id", quantityField: "inbrm_quantity" },
                inbfg: { repo: manager.getRepository(m_inb_finished_goods), alias: "inbfg", ifmField: "fgifm_id", ifmTable: "m_finished_goods_ifm", idField: "inbfg_id", quantityField: "inbfg_quantity" },
                inbsemi: { repo: manager.getRepository(m_inb_semi), alias: "inbsemi", ifmField: "semiifm_id", ifmTable: "m_semi_ifm", idField: "inbsemi_id", quantityField: "inbsemi_quantity" }
            };
        
            let lowStockItems = [];
        
            for (const [key, table] of Object.entries(tables)) {
                //console.log(`üîé Checking ${key.toUpperCase()}`);
        
                const items = await table.repo.createQueryBuilder(table.alias)
                    .select([
                        `${table.alias}.${table.idField} AS reference_id`,
                        `${table.alias}.${table.ifmField} AS ifm_id`,
                        `${table.alias}.${table.quantityField} AS inb_quantity`,
                        `'${key.toUpperCase()}' AS reference_type`
                    ])
                    .getRawMany();
        
                for (const item of items) {
                    
                    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `m_criteria`
                    const criteria = await manager.createQueryBuilder()
                        .select([
                            "crt.crt_rem_low AS crt_rem_low", 
                            "crt.crt_rem_medium AS crt_rem_medium", 
                            "crt.crt_rem_high AS crt_rem_high"
                        ])
                        .from(m_criteria, "crt")
                        .innerJoin(table.ifmTable, "ifm", `ifm.crt_id = crt.crt_id`)
                        .where(`ifm.${table.ifmField} = :ifmId`, { ifmId: item.ifm_id })
                        .getRawOne();
        
                    if (!criteria) continue;
        
                    let alertLevel: NotiLevel | null = null;
        
                    if (criteria.crt_rem_high !== null && item.inb_quantity <= criteria.crt_rem_high) alertLevel = NotiLevel.HIGH;
                    else if (criteria.crt_rem_medium !== null && item.inb_quantity <= criteria.crt_rem_medium) alertLevel = NotiLevel.MEDIUM;
                    else if (criteria.crt_rem_low !== null && item.inb_quantity <= criteria.crt_rem_low) alertLevel = NotiLevel.LOW;
        
                    if (alertLevel) {
                        item.alert_level = alertLevel;
                        lowStockItems.push(item);
                    }
                }
            }
        
            return lowStockItems;
        }
        
        //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        private async processStockNotification(manager: EntityManager, item: any): Promise<boolean> {
            const notifRepo = manager.getRepository(m_notifications);
            const userNotifRepo = manager.getRepository(s_user_notification);
        
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            const existingNotif = await notifRepo.createQueryBuilder("notif")
                .select([
                    "notif.notif_id AS notif_id", 
                    "notif.reference_id AS reference_id", 
                    "notif.reference_type AS reference_type",
                    "notif.alert_level AS alert_level"
                ])
                .where("notif.reference_id = :refId AND notif.notif_type = :notifType AND notif.reference_type = :refType", { 
                    refId: item.reference_id, 
                    notifType: NotifType.MINIMUM_STOCK,
                    refType: item.reference_type
                })
                .getRawOne();
        
            if (existingNotif) {
                if (existingNotif.alert_level === item.alert_level) {
                    //console.log(`‚úÖ Alert level unchanged. Skipping insert for ID: ${item.reference_id}`);
                    return false;
                } else {
                  //  console.log(`üóëÔ∏è Removing outdated notification: notif_id=${existingNotif.notif_id}`);
                    await notifRepo.delete({ notif_id: existingNotif.notif_id });
                    await userNotifRepo.delete({ notif_id: existingNotif.notif_id });
                }
            }
                
                    // ‚úÖ Insert new notification
            const inserted = await notifRepo.insert({
                notif_type: NotifType.MINIMUM_STOCK,
                reference_type: item.reference_type,
                reference_id: item.reference_id,
                alert_level: item.alert_level,
                create_date: new Date(),
                create_by: "system",
            });
            const notif_id = inserted.identifiers[0].notif_id;

            // ‚úÖ Link with users
            const userIds = await getUsersToNotify(NotifType.MINIMUM_STOCK, this.userRepository, manager);
            const userNotifData = userIds.map(user_id => ({
                user_id,
                notif_id,
                notif_status: NotifStatus.UNREAD
            }));
            await userNotifRepo.save(userNotifData);

            // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô WebSocket
            getIO().emit("new-notification", {
                notif_type: NotifType.MINIMUM_STOCK,
                reference_type: item.reference_type,
                reference_id: item.reference_id,
                alert_level: item.alert_level,
                create_date: new Date()
            });

            //console.log("üì¢ WebSocket sent: MINIMUM_STOCK");

            return true;
        }
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• code, lot, name
        private async fetchAllNotifications(manager: EntityManager, userId: number) {
            const notifRepo = manager.getRepository(m_notifications);
        
            const notifications = await notifRepo.createQueryBuilder("notif")
                .innerJoin(s_user_notification, "usernotif", "usernotif.notif_id = notif.notif_id AND usernotif.user_id = :userId", { userId })
                .select([
                    "notif.notif_id AS notif_id",
                    "notif.reference_id AS reference_id",
                    "notif.reference_type AS reference_type",
                    "usernotif.notif_status AS notif_status",
                    "notif.alert_level AS alert_level",
                    "DATE_FORMAT(notif.create_date, '%d %b %y') AS date",
                    "DATE_FORMAT(notif.create_date, '%H:%i:%s') AS time"
                ])
                .where("notif.notif_type = :notifType", { notifType: NotifType.MINIMUM_STOCK })
                .orderBy("notif.create_date", "DESC")
                .getRawMany();
        
            // ‚úÖ Mapping ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            const tableMap = {
                "INBRM": { table: "m_inb_raw_material", codeField: "inbrm_code", lotField: "inbrm_lot", nameField: "rmifm_name", joinField: "rmifm_id", ifmTable: "m_raw_material_ifm" },
                "INBFG": { table: "m_inb_finished_goods", codeField: "inbfg_code", lotField: "inbfg_lot", nameField: "fgifm_name", joinField: "fgifm_id", ifmTable: "m_finished_goods_ifm" },
                "INBSEMI": { table: "m_inb_semi", codeField: "inbsemi_code", lotField: "inbsemi_lot", nameField: "semiifm_name", joinField: "semiifm_id", ifmTable: "m_semi_ifm" }
            };
        
            for (const notif of notifications) {
                // üîπ ‡πÉ‡∏ä‡πâ Type Assertion ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å TypeScript ‡∏ß‡πà‡∏≤ `notif.reference_type` ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô `tableMap`
                const tableInfo = tableMap[notif.reference_type as keyof typeof tableMap];
        
                if (!tableInfo) continue;
        
                const additionalData = await manager.createQueryBuilder()
                    .select([
                        `inb.${tableInfo.codeField} AS inb_code`,
                        `inb.${tableInfo.lotField} AS inb_lot`,
                        `ifm.${tableInfo.nameField} AS inb_name`
                    ])
                    .from(tableInfo.table, "inb")
                    .leftJoin(tableInfo.ifmTable, "ifm", `ifm.${tableInfo.joinField} = inb.${tableInfo.joinField}`)
                    .where(`inb.${notif.reference_type.toLowerCase()}_id = :refId`, { refId: notif.reference_id })
                    .getRawOne();
        
                notif.inb_code = additionalData?.inb_code || null;
                notif.inb_lot = additionalData?.inb_lot || null;
                notif.inb_name = additionalData?.inb_name || null;
                notif.alert_level = `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå ‡∏£‡∏∞‡∏î‡∏±‡∏ö ${notif.alert_level}`;
            }
        
            return notifications;
        }
        

        

    /*
    * Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏à‡∏≤‡∏Å create_date)
    */
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ NotiLevel, NotifType, NotifStatus, m_inb_raw_material, m_inb_finished_goods, m_inb_semi, m_criteria, m_notifications 
    // ‡∏ñ‡∏π‡∏Å import ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß

    async getNotiShelfLife(userId: number, manager?: EntityManager, isFromCron: boolean = false): Promise<ApiResponse<{ newAdded: number, details: any[] }>> {
        let response = new ApiResponse<{ newAdded: number, details: any[] }>();
        const operation = 'NotifApprovalService.getNotiShelfLife';
    
        const queryRunner = manager ? null : AppDataSource.createQueryRunner();
        const useManager = manager || queryRunner?.manager;
    
        if (!useManager) {
            return response.setIncomplete(lang.msg('validation.no_entityManager_or_queryRunner_available'));
        }
    
        if (!manager && queryRunner) {
            await queryRunner.connect();
            await queryRunner.startTransaction();
        }
    
        try {
            //console.log("üîç Checking shelf life for notifications...");
            const userNotifRepo = useManager.getRepository(s_user_notification);

            // 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            const expiringItems = await this.fetchExpiringItems(useManager);
        
            let newAdded = 0;
        
            // 2. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            for (const item of expiringItems) {
                const isNewNotificationAdded = await this.processShelfLifeNotification(useManager, item);
                if (isNewNotificationAdded) newAdded++;
            }
        
            // 3. ‡∏î‡∏∂‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà)
            const allNotifs = await this.fetchAllShelfLifeNotifications(useManager, userId);
        
            // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `notif_status` ‡πÄ‡∏õ‡πá‡∏ô `READ` (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ frontend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ)
            if (!isFromCron) {
                const unreadNotifIds = allNotifs
                    .filter(notif => notif.notif_status === NotifStatus.UNREAD)
                    .map(notif => notif.notif_id);

                if (unreadNotifIds.length > 0) {
                    await userNotifRepo.createQueryBuilder()
                        .update()
                        .set({ notif_status: NotifStatus.READ })
                        .where("user_id = :userId AND notif_id IN (:...unreadNotifIds) AND notif_status = :status", {
                            userId,
                            unreadNotifIds,
                            status: NotifStatus.UNREAD
                        })
                        .execute();

                    //console.log(`üìñ Marked ${unreadNotifIds.length} shelf life notifications as READ for user_id=${userId}`);
                }
            }


            if (!manager && queryRunner) {
                await queryRunner.commitTransaction();
            }

            return response.setComplete(lang.msgFound("notif.shelf_life"), { newAdded, details: allNotifs });

        } catch (error: any) {
            if (!manager && queryRunner) {
                await queryRunner.rollbackTransaction();
            }
            console.error(`‚ùå Error in ${operation}:`, error);
            return response.setIncomplete(lang.msgErrorFunction(operation, error.message));
        } finally {
            if (!manager && queryRunner) {
                await queryRunner.release();
            }
        }
    }
    
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
        private async fetchExpiringItems(manager: EntityManager) {
            const tables = {
            inbrm: {
                repo: manager.getRepository(m_inb_raw_material),
                alias: "inbrm",
                ifmField: "rmifm_id",
                ifmTable: "m_raw_material_ifm",
                idField: "inbrm_id",
                createDateField: "create_date"
            },
            inbfg: {
                repo: manager.getRepository(m_inb_finished_goods),
                alias: "inbfg",
                ifmField: "fgifm_id",
                ifmTable: "m_finished_goods_ifm",
                idField: "inbfg_id",
                createDateField: "create_date"
            },
            inbsemi: {
                repo: manager.getRepository(m_inb_semi),
                alias: "inbsemi",
                ifmField: "semiifm_id",
                ifmTable: "m_semi_ifm",
                idField: "inbsemi_id",
                createDateField: "create_date"
            }
            };
        
            let expiringItems = [];
            const now = new Date();
            //console.log(`üîç [fetchExpiringItems] Current time: ${now.toISOString()}`);
        
            for (const [key, table] of Object.entries(tables)) {
            //console.log(`üîé Checking table: ${key.toUpperCase()}`);
        
            const items = await table.repo.createQueryBuilder(table.alias)
                .select([
                `${table.alias}.${table.idField} AS reference_id`,
                `${table.alias}.${table.ifmField} AS ifm_id`,
                `${table.alias}.${table.createDateField} AS create_date`,
                `'${key.toUpperCase()}' AS reference_type`
                ])
                .getRawMany();
        
            //console.log(`‚úÖ Retrieved ${items.length} items from ${key.toUpperCase()}`);
        
            for (const item of items) {
                if (!item.create_date) {
                //console.log(`‚ö†Ô∏è Skipping item with reference_id=${item.reference_id} because create_date is missing.`);
                continue;
                }
        
                const createDate = new Date(item.create_date);
        
                // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏à‡∏≤‡∏Å m_criteria
                const criteria = await manager.createQueryBuilder()
                .select([
                    "crt.crt_exp_low AS crt_exp_low", 
                    "crt.crt_exp_medium AS crt_exp_medium", 
                    "crt.crt_exp_high AS crt_exp_high"
                ])
                .from(m_criteria, "crt")
                .innerJoin(table.ifmTable, "ifm", `ifm.crt_id = crt.crt_id`)
                .where(`ifm.${table.ifmField} = :ifmId`, { ifmId: item.ifm_id })
                .getRawOne();
        
                if (!criteria) {
                //console.log(`‚ö†Ô∏è No criteria found for item reference_id=${item.reference_id} with ifm_id=${item.ifm_id}`);
                continue;
                }
        
                //console.log(`üìù Criteria for item reference_id=${item.reference_id}: crt_exp_low=${criteria.crt_exp_low}, crt_exp_medium=${criteria.crt_exp_medium}, crt_exp_high=${criteria.crt_exp_high}`);
        
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì low expiry ‡πÄ‡∏™‡∏°‡∏≠
                const lowExpiry = new Date(createDate);
                lowExpiry.setDate(lowExpiry.getDate() + Number(criteria.crt_exp_low));
        
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì medium expiry ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ crt_exp_medium
                let mediumExpiry: Date | null = null;
                let mediumTrigger: Date | null = null;
                if (criteria.crt_exp_medium != null) {
                    mediumExpiry = new Date(createDate);
                    mediumExpiry.setDate(mediumExpiry.getDate() + Number(criteria.crt_exp_low) + Number(criteria.crt_exp_medium));
                    mediumTrigger = new Date(mediumExpiry);
                    mediumTrigger.setDate(mediumTrigger.getDate() - 1);
                }
        
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì high expiry ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ crt_exp_high
                let highExpiry: Date | null = null;
                let highTrigger: Date | null = null;
                if (criteria.crt_exp_high != null) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ mediumExpiry ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πá‡πÉ‡∏ä‡πâ 0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö crt_exp_medium ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
                const mediumDays = criteria.crt_exp_medium ? Number(criteria.crt_exp_medium) : 0;
                    highExpiry = new Date(createDate);
                    highExpiry.setDate(highExpiry.getDate() + Number(criteria.crt_exp_low) + mediumDays + Number(criteria.crt_exp_high));
                    highTrigger = new Date(highExpiry);
                    highTrigger.setDate(highTrigger.getDate() - 1);
                }
        
                // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î alert_level ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á trigger
                let alertLevel: NotiLevel;
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö alert_level:
                // - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ highTrigger ‡πÅ‡∏•‡∏∞ now >= highTrigger ‚Üí HIGH
                // - Else ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ mediumTrigger ‡πÅ‡∏•‡∏∞ now >= mediumTrigger ‚Üí MEDIUM
                // - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÜ ‚Üí LOW
                if (highTrigger && now >= highTrigger) {
                    alertLevel = NotiLevel.HIGH;
                    //console.log(`üîî [HIGH] Item ref_id=${item.reference_id}: now ${now.toISOString()} >= high trigger ${highTrigger.toISOString()} (High expiry: ${highExpiry!.toISOString()})`);
                } else if (mediumTrigger && now >= mediumTrigger) {
                    alertLevel = NotiLevel.MEDIUM;
                    //console.log(`üîî [MEDIUM] Item ref_id=${item.reference_id}: now ${now.toISOString()} >= medium trigger ${mediumTrigger.toISOString()} (Medium expiry: ${mediumExpiry!.toISOString()})`);
                } else {
                    alertLevel = NotiLevel.LOW;
                    //console.log(`üîî [LOW] Item ref_id=${item.reference_id}: now ${now.toISOString()} is before medium trigger ${mediumTrigger ? mediumTrigger.toISOString() : "N/A"} (Low expiry: ${lowExpiry.toISOString()})`);
                }
        
                item.alert_level = alertLevel;
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å expiry_date ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
                if (alertLevel === NotiLevel.LOW) {
                    item.expiry_date = lowExpiry;
                } else if (alertLevel === NotiLevel.MEDIUM && mediumExpiry) {
                    item.expiry_date = mediumExpiry;
                } else if (alertLevel === NotiLevel.HIGH && highExpiry) {
                    item.expiry_date = highExpiry;
                }
        
                expiringItems.push(item);
                //console.log(`‚úÖ Added item reference_id=${item.reference_id} with alert_level=${alertLevel}`);
            }
            }
        
            //console.log(`üîö Finished fetching. Total expiring items: ${expiringItems.length}`);
            return expiringItems;
        }
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô shelf life (‡πÑ‡∏°‡πà insert ‡∏ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ alert_level ‡πÄ‡∏î‡∏¥‡∏°)
        private async processShelfLifeNotification(manager: EntityManager, item: any): Promise<boolean> {
            const notifRepo = manager.getRepository(m_notifications);
            const userNotifRepo = manager.getRepository(s_user_notification);
            const userRepo = manager.getRepository(s_user);
        
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ reference_id, notif_type ‡πÅ‡∏•‡∏∞ reference_type)
            const existingNotif = await notifRepo.findOne({
                where: {
                    reference_id: item.reference_id,
                    notif_type: NotifType.SHELF_LIFE,
                    reference_type: item.reference_type,
                },
            });
        
            if (existingNotif) {
                if (String(existingNotif.alert_level) === String(item.alert_level)) {
                    //console.log(`‚öôÔ∏è Notification already exists for reference_id=${item.reference_id} with same alert_level=${item.alert_level}. Skipping insert.`);
                    return false;
                } else {
                    //console.log(`‚öôÔ∏è Alert level changed. Removing notif_id=${existingNotif.notif_id}`);
                    // ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á m_notifications ‡πÅ‡∏•‡∏∞ s_user_notification
                    await userNotifRepo.delete({ notif_id: existingNotif.notif_id });
                    await notifRepo.delete(existingNotif.notif_id);
                }
            }
        
        
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
            const newNotif = notifRepo.create({
                notif_type: NotifType.SHELF_LIFE,
                reference_type: item.reference_type,
                reference_id: item.reference_id,
                alert_level: item.alert_level,
                create_date: new Date(),
                create_by: "system",
            });

            const savedNotif = await notifRepo.save(newNotif);

            // ‡∏î‡∏∂‡∏á user_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö noti ‡∏ï‡∏≤‡∏° role
            const userIds = await getUsersToNotify(NotifType.SHELF_LIFE, userRepo, manager);

            if (userIds.length > 0) {
                const userNotifList = userIds.map(userId => ({
                    notif_id: savedNotif.notif_id,
                    user_id: userId,
                    notif_status: NotifStatus.UNREAD
                }));
                await userNotifRepo.save(userNotifList);
            }

            // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô WebSocket
            getIO().emit("new-notification", {
                notif_type: NotifType.SHELF_LIFE,
                reference_type: item.reference_type,
                reference_id: item.reference_id,
                alert_level: item.alert_level,
                create_date: new Date()
            });

            //console.log("üì¢ WebSocket sent: SHELF_LIFE");

            return true;
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô shelf life ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (code, lot, ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
        private async fetchAllShelfLifeNotifications(manager: EntityManager, userId: number) {
            const notifRepo = manager.getRepository(m_notifications);
        
            const notifications = await notifRepo.createQueryBuilder("notif")
                .innerJoin(s_user_notification, "usernotif", "notif.notif_id = usernotif.notif_id AND usernotif.user_id = :userId", { userId })
                .select([
                    "notif.notif_id AS notif_id",
                    "notif.reference_id AS reference_id",
                    "notif.reference_type AS reference_type",
                    "usernotif.notif_status AS notif_status",
                    "notif.alert_level AS alert_level",
                    "DATE_FORMAT(notif.create_date, '%d %b %y') AS date",
                    "DATE_FORMAT(notif.create_date, '%H:%i:%s') AS time"
                ])
                .where("notif.notif_type = :notifType", { notifType: NotifType.SHELF_LIFE })
                .orderBy("notif.create_date", "DESC") 
                .getRawMany();
        
            // Mapping ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            const tableMap = {
            "INBRM": { table: "m_inb_raw_material", codeField: "inbrm_code", lotField: "inbrm_lot", nameField: "rmifm_name", joinField: "rmifm_id", ifmTable: "m_raw_material_ifm" },
            "INBFG": { table: "m_inb_finished_goods", codeField: "inbfg_code", lotField: "inbfg_lot", nameField: "fgifm_name", joinField: "fgifm_id", ifmTable: "m_finished_goods_ifm" },
            "INBSEMI": { table: "m_inb_semi", codeField: "inbsemi_code", lotField: "inbsemi_lot", nameField: "semiifm_name", joinField: "semiifm_id", ifmTable: "m_semi_ifm" }
            };
        
            for (const notif of notifications) {
            const tableInfo = tableMap[notif.reference_type as keyof typeof tableMap];
            if (!tableInfo) continue;
        
            const additionalData = await manager.createQueryBuilder()
                .select([
                `inb.${tableInfo.codeField} AS inb_code`,
                `inb.${tableInfo.lotField} AS inb_lot`,
                `ifm.${tableInfo.nameField} AS inb_name`
                ])
                .from(tableInfo.table, "inb")
                .leftJoin(tableInfo.ifmTable, "ifm", `ifm.${tableInfo.joinField} = inb.${tableInfo.joinField}`)
                .where(`inb.${notif.reference_type.toLowerCase()}_id = :refId`, { refId: notif.reference_id })
                .getRawOne();
        
            notif.inb_code = additionalData?.inb_code || null;
            notif.inb_lot = additionalData?.inb_lot || null;
            notif.inb_name = additionalData?.inb_name || null;
            notif.alert_level = `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏£‡∏∞‡∏î‡∏±‡∏ö ${notif.alert_level}`;
            }
        
            return notifications;
        }

    /*
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô UNREAD 
    */
    async getUnreadNotif(userId: number, manager?: EntityManager): Promise<ApiResponse<any | null>> {
        const response = new ApiResponse<any | null>();
        const operation = 'NotifApprovalService.getUnreadNotif';
        
        try {
            const userNotifRepo = manager ? manager.getRepository(s_user_notification) : this.usernotifRepo;

            const rawData = await userNotifRepo
                .createQueryBuilder('user_notif')
                .innerJoin(m_notifications, 'notif', 'notif.notif_id = user_notif.notif_id')
                .select('notif.notif_type', 'notif_type')
                .addSelect('COUNT(*)', 'count')
                .where('user_notif.user_id = :userId', { userId })
                .andWhere('user_notif.notif_status = :status', { status: NotifStatus.UNREAD })
                .groupBy('notif.notif_type')
                .getRawMany();
        
            // üëá ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤ default
            const result = {
                SHELF_LIFE: 0,
                MINIMUM_STOCK: 0,
                TOOL_WITHDRAWAL: 0,
                REQUEST_APPROVAL: 0,
            };
        
            // üëá map ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å rawData ‡πÑ‡∏õ‡∏¢‡∏±‡∏á object
            rawData.forEach((row: any) => {
                const type = row.notif_type;
                const count = Number(row.count);
                if (type in result) {
                    result[type as keyof typeof result] = count;
                }
            });
        
            return response.setComplete(lang.msgFound('item.notif'), result);
        
        } catch (error: any) {
            console.error(`‚ùå Error in ${operation}:`, error);
            return response.setIncomplete(`Error: ${error.message}`);
        }
    }

    /*
     * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà READ ‡πÅ‡∏•‡πâ‡∏ß
    */
    async clearOldNotifications(months: number = 3, manager?: EntityManager): Promise<void> {
        const useManager = manager || AppDataSource.manager;
    
        // üî∏ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á N ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô)
        const cutoffDate = new Date();
        cutoffDate.setMonth(cutoffDate.getMonth() - months);
        cutoffDate.setHours(0, 0, 0, 0);
    
        // üî∏ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ notif_id ‡∏ó‡∏µ‡πà create_date < cutoff ‡πÅ‡∏•‡∏∞‡∏°‡∏µ status = READ
        const results = await useManager
            .getRepository(s_user_notification)
            .createQueryBuilder('usernotif')
            .innerJoin(m_notifications, 'notif', 'usernotif.notif_id = notif.notif_id')
            .select('usernotif.notif_id', 'notif_id')
            .where('notif.create_date < :cutoff', { cutoff: cutoffDate })
            .andWhere('usernotif.notif_status = :status', { status: NotifStatus.READ })
            .getRawMany();
    
        const notifIds = results.map(r => r.notif_id);
        if (notifIds.length === 0) {
            //console.log('‚úÖ No notifications to delete.');
            return;
        }
    
        // üî∏ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å s_user_notification
        await useManager.getRepository(s_user_notification)
            .createQueryBuilder()
            .delete()
            .where('notif_id IN (:...ids)', { ids: notifIds })
            .execute();
    
        // üî∏ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å m_notifications
        await useManager.getRepository(m_notifications)
            .createQueryBuilder()
            .delete()
            .where('notif_id IN (:...ids)', { ids: notifIds })
            .execute();
    
        //console.log(`üßπ Deleted ${notifIds.length} notifications older than ${months} months (before ${cutoffDate.toISOString().split('T')[0]}).`);
    }
    
}
