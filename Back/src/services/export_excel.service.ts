import ExcelJS from 'exceljs';
import { Response } from 'express';
import ResponseUtils, { HttpStatus } from '../utils/ResponseUtils';
import { ApiResponse } from '../models/api-response.model';

export class ExcelService {
    static async exportToExcel(
        structure: { 
            headers: { title: string; key?: string; col: number, colspan?: number }[], 
            subHeaders?: { title: string; key: string; col: number }[], 
            startRow: number,
            documentTitle?: string
        },
        data: any[],
        extraData: { 
            title: string; 
            key?: string;  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô optional
            row: number; 
            col: number; 
            colspan?: number; 
            horizontal?: 'left' | 'center' | 'right'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        }[] = [], // ‚úÖ ‡πÉ‡∏ä‡πâ key ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        fileName: string,
        res: Response,
        options?: { 
            headerBgColor?: string,
            headerTextColor?: string,
            titleFontSize?: number,
            titleBold?: boolean,
        }
    ) {
        try {
            console.log('‚úÖ Exporting Excel with structure:', structure);
            console.log('‚úÖ Data length:', data.length);
            if (data.length === 0) {
                return ResponseUtils.handleCustomResponse(
                    res,
                    new ApiResponse({
                        isCompleted: false,
                        message: 'No data available for export.',
                    }),
                    HttpStatus.NOT_FOUND
                );
            }

            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Sheet1');

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Merge (‡πÉ‡∏ä‡πâ headers ‡πÅ‡∏•‡∏∞ subHeaders)
            const maxCol = Math.max(
                ...structure.headers.map(({ col, colspan }) => col + (colspan || 1) - 1), // Headers
                ...(structure.subHeaders ? structure.subHeaders.map(({ col }) => col) : []) // SubHeaders
            );

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ `documentTitle` ‡πÉ‡∏´‡πâ Merge ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            if (structure.documentTitle) {
                worksheet.mergeCells(1, 1, 1, maxCol); // ‚úÖ Merge documentTitle ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
                const titleCell = worksheet.getCell(1, 1);
                titleCell.value = structure.documentTitle;
                titleCell.font = { 
                    size: options?.titleFontSize || 14, 
                    bold: options?.titleBold !== false 
                };
                titleCell.alignment = { horizontal: 'center', vertical: 'middle' };
            }

            // ‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö title, key, horizontal, colspan)
            extraData?.forEach(({ title, key, row, col, colspan = 1, horizontal = 'center' }) => {
                const endCol = col + colspan - 1; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Merge
                const labelCell = worksheet.getCell(row, col);

                // üü¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `key` ‚Üí ‡πÉ‡∏™‡πà `title` ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏ß‡∏ô
                if (!key) {
                    labelCell.value = title;
                } else {
                    // üü¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ `key` ‚Üí ‡πÉ‡∏™‡πà `title` ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å `data`
                    labelCell.value = title;
                    const valueCell = worksheet.getCell(row, endCol + 1);
                    valueCell.value = data[0]?.[key] ?? '-';
                    valueCell.font = { bold: false };
                    valueCell.alignment = { horizontal: 'left' };
                }

                // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Font ‡πÅ‡∏•‡∏∞ Alignment ‡∏ï‡∏≤‡∏° `horizontal`
                labelCell.font = { bold: true, size: 12 };
                labelCell.alignment = { horizontal };

                // ‚úÖ Merge Cells ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                if (colspan > 1) {
                    worksheet.mergeCells(row, col, row, endCol);
                }
            });

            // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ Header ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            const headerBgColor = options?.headerBgColor || 'FFFFFF'; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
            const headerTextColor = options?.headerTextColor || '000000'; // ‡∏™‡∏µ‡∏î‡∏≥

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ subHeaders ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const hasSubHeaders = structure.subHeaders && structure.subHeaders.length > 0;
            const subHeaders = structure.subHeaders || [];

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á Header ‡πÅ‡∏•‡∏∞ Sub-header
            const headerRowIndex = hasSubHeaders ? structure.startRow - 2 : structure.startRow - 1;
            const subHeaderRowIndex = headerRowIndex + 1;

            // ‚úÖ ‡∏ß‡∏≤‡∏î Header ‡∏´‡∏•‡∏±‡∏Å (Main Headers)
            structure.headers.forEach(({ title, col, colspan }) => {
                const endCol = col + (colspan ? colspan - 1 : 0);
                const hasSubHeader = subHeaders.some(sh => sh.col >= col && sh.col <= endCol);

                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `subHeaders` ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á merge ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                if (hasSubHeaders && hasSubHeader) {
                    worksheet.mergeCells(headerRowIndex, col, headerRowIndex, endCol);
                } else if (hasSubHeaders) {
                    worksheet.mergeCells(headerRowIndex, col, subHeaderRowIndex, endCol);
                }

                const cell = worksheet.getCell(headerRowIndex, col);
                cell.value = title;
                cell.font = { bold: true, color: { argb: headerTextColor } };
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: headerBgColor }
                };
                cell.border = {
                    top: { style: 'thin' },
                    left: { style: 'thin' },
                    bottom: { style: 'thin' },
                    right: { style: 'thin' }
                };
                cell.alignment = { horizontal: 'center', vertical: 'middle' };
            });

            // ‚úÖ ‡∏ß‡∏≤‡∏î Sub-Header (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if (hasSubHeaders) {
                subHeaders.forEach(({ title, col }) => {
                    const cell = worksheet.getCell(subHeaderRowIndex, col);
                    cell.value = title;
                    cell.font = { bold: true, color: { argb: headerTextColor } };
                    cell.fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: headerBgColor }
                    };
                    cell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                    cell.alignment = { horizontal: 'center', vertical: 'middle' };
                });
            }

            // ‚úÖ ‡∏£‡∏ß‡∏° headers ‡πÅ‡∏•‡∏∞ subHeaders ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
            const columns: { title: string; key: string; col: number }[] = structure.headers.flatMap(header => {
                const relatedSubHeaders = subHeaders
                    .filter(sh => sh.col >= header.col && sh.col < (header.col + (header.colspan || 1)))
                    .map(sh => ({
                        title: sh.title,
                        key: sh.key ?? '', // üîπ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô key ‡πÄ‡∏õ‡πá‡∏ô undefined
                        col: sh.col
                    }));

                return relatedSubHeaders.length > 0
                    ? relatedSubHeaders
                    : [{ title: header.title, key: header.key ?? '', col: header.col }];
            });

            // ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á
            console.log("‚úÖ Final Columns Used:", columns);

            // ‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô Excel
            let currentRow = structure.startRow;
            data.forEach((row, rowIndex) => {
                const excelRow = worksheet.getRow(currentRow);
                console.log(`üîπ Processing row ${rowIndex + 1}:`, row);

                columns.forEach(({ key, col }) => {
                    const cell = excelRow.getCell(col);
                    cell.value = key ? row[key] ?? '-' : '-';
                    cell.alignment = { horizontal: 'left', vertical: 'middle' };
                    cell.border = {
                        top: { style: 'thin' },
                        left: { style: 'thin' },
                        bottom: { style: 'thin' },
                        right: { style: 'thin' }
                    };
                });

                currentRow++;
            });


            // ‚úÖ Debug ‡∏î‡∏π‡∏ß‡πà‡∏≤ Data ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            console.log(`‚úÖ Total Rows Written: ${currentRow - structure.startRow}`);

            // ‚úÖ Auto Fit Columns: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á Header + SubHeader + Data
            structure.headers.forEach(({ col, key, title, colspan }) => {
                let maxHeaderWidth = title.length;
                let totalSubHeaderWidth = 0; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á subHeader ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ colspan
                let subHeaderWidths: { [col: number]: number } = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ subHeader

                // üü¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ SubHeader ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                const relatedSubHeaders = subHeaders.filter(sh => sh.col >= col && sh.col < (col + (colspan || 1)));
                if (relatedSubHeaders.length > 0) {
                    relatedSubHeaders.forEach(sh => {
                        const maxSubHeaderDataWidth = Math.max(
                            sh.title.length, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ subHeader
                            ...data.map(row => (row[sh.key] ? row[sh.key].toString().trim().length : 0)) // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
                        );
                        subHeaderWidths[sh.col] = maxSubHeaderDataWidth + 4; // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding 4
                        totalSubHeaderWidth += maxSubHeaderDataWidth + 4; // ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å subHeader
                    });
                }

                // üü¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
                let maxDataWidth = key
                    ? Math.max(...data.map(row => (row[key] ? row[key].toString().trim().length : 0)))
                    : 0;

                // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                let finalWidth = Math.max(maxHeaderWidth, maxDataWidth, totalSubHeaderWidth) + 4;

                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ subHeaders ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏¢‡∏Å
                if (relatedSubHeaders.length > 0) {
                    relatedSubHeaders.forEach(sh => {
                        worksheet.getColumn(sh.col).width = subHeaderWidths[sh.col];
                    });
                } else {
                    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ subHeaders ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ colspan ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                    worksheet.getColumn(col).width = finalWidth;
                }
            });

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á buffer ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Response
            console.log('‚úÖ Writing Excel file...');
            const buffer = await workbook.xlsx.writeBuffer();

            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename=${fileName}.xlsx`);
            res.send(buffer);

        } catch (error: any) {
            console.error('‚ùå Error exporting to Excel:', error);
            ResponseUtils.handleError(
                res,
                'exportToExcel',
                error.message,
                'excel.export'
            );
        }
    }
}
