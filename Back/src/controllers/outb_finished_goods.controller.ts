import { Request, Response } from 'express';
import dotenv from 'dotenv';
import ResponseUtils, { HttpStatus } from '../utils/ResponseUtils';
import * as lang from '../utils/LangHelper'; // ‡πÉ‡∏ä‡πâ helper function
import { DataSanitizer } from '../utils/DataSanitizer'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ DataSanitizer
import RequestUtils from '../utils/RequestUtils'; // Import the utility class

import { OutbFGModel , OutbFGNoBomModel} from '../models/outb_finished_goods.model';
import { OutbFinishedGoodsService } from '../services/outb_finished_goods.service';
import { ApprovalStatus, WithdrawStatus } from '../common/global.enum';

import { ExcelService } from '../services/export_excel.service';
import { mapApprovalStatus, mapShipmentStatus, mapWithdrawStatus } from '../utils/StatusMapper';
import { ApiResponse } from '../models/api-response.model';
import { applyFilters } from '../utils/ExportExcelUtils';

dotenv.config();

const outbfinishedgoodsService = new OutbFinishedGoodsService();

export const create = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.create';

    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    try {  
        console.log('üì• Raw req.body:', req.body);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!req.body || Object.keys(req.body).length === 0) {
            return ResponseUtils.handleBadRequest(res, lang.msg('request.body.empty'));
        }

        // Sanitization ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å req.body
        const data: Partial<OutbFGModel> = DataSanitizer.fromObject<OutbFGModel>(
            req.body,
            OutbFGModel
        );
        
        data.create_by = reqUsername;

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service
        const response = await outbfinishedgoodsService.create(data, reqUsername);

        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.CREATED);

    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorCreate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};


export const createNoBom = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.createNoBom';

    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    try {  
        console.log('Raw req.body:', req.body);

        // Sanitization ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å req.body ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á ModelClass ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        const data: Partial<OutbFGNoBomModel> = DataSanitizer.fromObject(req.body, OutbFGNoBomModel);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service
        const response = await outbfinishedgoodsService.createNoBom(data, reqUsername);

        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.CREATED);

    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorCreate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};

export const withdrScan = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.withdrScan';
    const reqUsername = RequestUtils.getUsernameToken(req, res);
    const { outbfg_id } = req.params;
    const { items } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!reqUsername || !outbfg_id || !Array.isArray(items) || items.length === 0) {
        return ResponseUtils.handleBadRequest(res, lang.msgInvalidParameter());
    }

    try {
        const outbfgIdNumber = Number(outbfg_id);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á service ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ service ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏≠‡∏á
        const response = await outbfinishedgoodsService.withdrScan(outbfgIdNumber, items, reqUsername);

        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.OK);
    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorUpdate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};

export const shipmtScan = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.shipmtScan';
    const reqUsername = RequestUtils.getUsernameToken(req, res);
    const { outbfg_id } = req.params;
    const { items } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    if (!reqUsername || !outbfg_id || !Array.isArray(items) || items.length === 0) {
        return ResponseUtils.handleBadRequest(res, lang.msgInvalidParameter());
    }

    try {
        const outbfgIdNumber = Number(outbfg_id);

        // ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ service ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ validation ‡πÅ‡∏•‡∏∞ logic ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const response = await outbfinishedgoodsService.shipmtScan(outbfgIdNumber, items, reqUsername);

        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.OK);
    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorUpdate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};


export const update = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.update';

    // ‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å Token
    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    try {
        console.log('Raw req.body:', req.body);

        // ‡∏£‡∏±‡∏ö outbfg_id ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å req.body
        const outbfg_id = Number(req.params.outbfg_id);
        if (!outbfg_id || isNaN(Number(outbfg_id))) {
            return ResponseUtils.handleBadRequestIsRequired(res, lang.msgInvalidParameter());
        }

        // Sanitization ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å req.body ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á ModelClass ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        const data: Partial<OutbFGModel> = DataSanitizer.fromObject(req.body, OutbFGModel);
        data.update_by = reqUsername;

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const response = await outbfinishedgoodsService.update(outbfg_id, data, reqUsername);

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.OK);

    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorUpdate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};

export const updateNoBom = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.updateNoBom';

    // ‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å Token
    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    try {
        console.log('Raw req.body:', req.body);

        // ‡∏£‡∏±‡∏ö outbfg_id ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å req.body
        const outbfg_id = Number(req.params.outbfg_id);
        if (!outbfg_id || isNaN(Number(outbfg_id))) {
            return ResponseUtils.handleBadRequestIsRequired(res, lang.msgInvalidParameter());
        }

        // Sanitization ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å req.body ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á ModelClass ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        const data: Partial<OutbFGNoBomModel> = DataSanitizer.fromObject(req.body, OutbFGNoBomModel);
        data.update_by = reqUsername;

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const response = await outbfinishedgoodsService.updateNoBom(outbfg_id, data, reqUsername);

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.OK);

    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorUpdate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};


export const del = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.delete';

    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á outbfg_id
    const outbfg_id = Number(req.params.outbfg_id);
    if (!outbfg_id || isNaN(outbfg_id) || outbfg_id <= 0) {
        return ResponseUtils.handleBadRequest(res, lang.msgInvalidParameter());
    }

    try {
        console.log(`Request to delete outbfg_id: ${outbfg_id} by user: ${reqUsername}`);

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const response = await outbfinishedgoodsService.delete(outbfg_id, reqUsername);

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
        return ResponseUtils.handleResponse(res, response);
    } catch (error: any) {
        console.error(`Error in ${operation}:`, error);
        return ResponseUtils.handleErrorDelete(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};

export const getAll = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.getAll';

    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) return;

    try {
        // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ approvalStatus ‡πÅ‡∏•‡∏∞ withdrawStatus ‡∏à‡∏≤‡∏Å query parameter
        const { approvalStatus, withdrawStatus } = req.query;
        let approvalStatusValue: ApprovalStatus | undefined;
        let filterWithdrawStatus: boolean | undefined;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ approvalStatus
        if (typeof approvalStatus === 'string') {
            const statusStr = approvalStatus.trim().toUpperCase(); // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô uppercase

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Enum ApprovalStatus ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (Object.values(ApprovalStatus).includes(statusStr as unknown as ApprovalStatus)) {
                approvalStatusValue = statusStr as ApprovalStatus;
            } else {
                return ResponseUtils.handleErrorGet(
                    res,
                    operation,
                    `Invalid approvalStatus value. Accepted values: ${Object.values(ApprovalStatus).join(', ')}`,
                    'item.outbfg',
                    true,
                    reqUsername
                );
            }
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ withdrawStatus ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô boolean (true/false)
        if (typeof withdrawStatus === 'string') {
            filterWithdrawStatus = withdrawStatus.trim().toLowerCase() === 'true';
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á approvalStatus ‡πÅ‡∏•‡∏∞ filterWithdrawStatus ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        const response = await outbfinishedgoodsService.getAll(approvalStatusValue, filterWithdrawStatus);
        
        return ResponseUtils.handleResponse(res, response);
    } catch (error: any) {
        return ResponseUtils.handleErrorGet(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};


export const getById = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.getById';

    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á outbfg_id
    const outbfg_id = Number(req.params.outbfg_id);
    if (!outbfg_id || isNaN(outbfg_id) || outbfg_id <= 0) {
        return ResponseUtils.handleBadRequest(res, lang.msgInvalidParameter());
    }

    try {
        console.log('Raw req.params.outbfg_id:', outbfg_id);

        const response = await outbfinishedgoodsService.getById(outbfg_id);

        return ResponseUtils.handleResponse(res, response);

    } catch (error: any) {
        // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        console.error(`Error during ${operation}:`, error);

         // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á response
        return ResponseUtils.handleErrorGet(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};

export const getReqById = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.getReqById';

    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á outbfg_id
    const outbfg_id = Number(req.params.outbfg_id);
    if (!outbfg_id || isNaN(outbfg_id) || outbfg_id <= 0) {
        return ResponseUtils.handleBadRequest(res, lang.msgInvalidParameter());
    }

    try {
        console.log('Raw req.params.outbfg_id:', outbfg_id);

        const response = await outbfinishedgoodsService.getReqById(outbfg_id);

        return ResponseUtils.handleResponse(res, response);

    } catch (error: any) {
        // Log ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        console.error(`Error during ${operation}:`, error);

         // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á response
        return ResponseUtils.handleErrorGet(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};

export const updateDates = async (req: Request, res: Response) => {
    const operation = 'OutbFinishedGoodsController.updateDates';

    // ‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å Token
    const reqUsername = RequestUtils.getUsernameToken(req, res);
    if (!reqUsername) {
        return ResponseUtils.handleBadRequest(res, lang.msgRequiredUsername());
    }

    try {
        console.log('Raw req.body:', req.body);

        // ‡∏£‡∏±‡∏ö `outbfg_id` ‡∏à‡∏≤‡∏Å `params`
        const outbfg_id = Number(req.params.outbfg_id);

        // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å `multipart/form-data`
        const { withdr_date, shipmt_date } = req.body;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `outbfg_id`
        if (!outbfg_id || isNaN(outbfg_id)) {
            return ResponseUtils.handleBadRequest(res, lang.msgInvalidParameter());
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const response = await outbfinishedgoodsService.updateDates(outbfg_id, { withdr_date, shipmt_date });

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Client
        return ResponseUtils.handleCustomResponse(res, response, HttpStatus.OK);

    } catch (error: any) {
        console.error(`Error during ${operation}:`, error);
        return ResponseUtils.handleErrorUpdate(res, operation, error.message, 'item.outbfg', true, reqUsername);
    }
};


export const exportAllToExcel = async (req: Request, res: Response) => {
    try {
        const fileName = req.query.fileName ? String(req.query.fileName) : 'Outbound_Finished_Goods_List';
        const documentTitle = req.query.documentTitle ? String(req.query.documentTitle) : '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÅ‡∏≠‡∏•‡∏û‡∏µ‡πÑ‡∏≠ ‡πÅ‡∏£‡πá‡∏Ñ‡πÄ‡∏£‡πá‡∏ô‡∏à‡πå (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢) ‡∏à‡∏≥‡∏Å‡∏±‡∏î';

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ filter ‡∏à‡∏≤‡∏Å query string
        const filters = {
            formatted_date: req.query.formatted_date ? String(req.query.formatted_date).trim().normalize("NFC") : undefined, 
            create_time: req.query.create_time ? String(req.query.create_time).trim() : undefined,
            outbfg_code: req.query.outbfg_code ? String(req.query.outbfg_code).trim().normalize("NFC") : undefined,
            outbfg_details: req.query.outbfg_details ? String(req.query.outbfg_details).trim().normalize("NFC") : undefined,
            outbfg_appr_status: req.query.outbfg_appr_status ? String(req.query.outbfg_appr_status).trim().normalize("NFC") : undefined,
            outbfgitm_withdr_status: req.query.outbfgitm_withdr_status ? String(req.query.outbfgitm_withdr_status).trim().normalize("NFC") : undefined,
            outbfgitm_shipmt_status: req.query.outbfgitm_shipmt_status ? String(req.query.outbfgitm_shipmt_status).trim().normalize("NFC") : undefined
        };
        console.log('‚úÖ Filters:', filters);

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å `outbfinishedgoodsService`
        const response = await outbfinishedgoodsService.getAll();
        console.log('‚úÖ Data retrieved from outbfinishedgoodsService:', response);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!response.isCompleted || !response.Data || response.Data.length === 0) {
            console.log('‚ùå No data found for export.');
            return ResponseUtils.handleCustomResponse(res, response, HttpStatus.NOT_FOUND);
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ applyFilters() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà filters
        const filteredData = applyFilters(response.Data, filters);
        console.log(`‚úÖ Filtered data count: ${filteredData.length} rows`);

        if (filteredData.length === 0) {
            return ResponseUtils.handleCustomResponse(res, new ApiResponse({
                isCompleted: false,
                message: 'No data found after filtering.',
            }), HttpStatus.NOT_FOUND);
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ export to ecxel ‡πÇ‡∏î‡∏¢‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const extraData = [
            { title: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', row: 3, col: 1 ,colspan:3, horizontal: 'left'},
            { title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¥‡∏°‡∏û‡πå', key: 'today_date', row: 3, col: 7 ,colspan: 1}
        ] as const; //‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà

        // ‚úÖ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Header
        const excelStructure = {
            documentTitle,
            headers: [
                { title: '‡∏•‡∏≥‡∏î‡∏±‡∏ö', key: 'no', col: 1, colspan: 1 },
                { title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', key: 'formatted_date', col: 2},
                { title: '‡πÄ‡∏ß‡∏•‡∏≤', key: 'create_time', col: 3},
                { title: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏ô‡∏≥‡∏™‡πà‡∏á', key: 'outbfg_code', col: 4},
                { title: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', key: 'outbfg_details', col: 5},
                { title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', key: 'outbfg_appr_status', col: 6},
                { title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å', key: 'outbfgitm_withdr_status', col: 7},
                { title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á', key: 'outbfgitm_shipmt_status', col: 8}
            ],
            startRow: 6 // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Sub-Header ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß 5
        };

        // ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Excel
        const excelData = filteredData.map((item: any ,index: number) => ({
            no: index + 1,
            formatted_date: item.formatted_date,
            create_time: item.create_time,
            today_date: item.today_date,
            outbfg_code: item.outbfg_code,
            outbfg_details: item.outbfg_details,
            outbfg_appr_status: mapApprovalStatus(item.outbfg_appr_status),
            outbfgitm_withdr_status: mapWithdrawStatus(item.outbfgitm_withdr_status),
            outbfgitm_shipmt_status: mapShipmentStatus(item.outbfgitm_shipmt_status)
        }));

        console.log('‚úÖ Sending data to ExcelService:', excelData.length, 'rows');

        await ExcelService.exportToExcel(excelStructure, excelData, [...extraData], fileName, res, {
            headerBgColor: req.query.headerBgColor ? String(req.query.headerBgColor) : 'FFFFFF',
            headerTextColor: req.query.headerTextColor ? String(req.query.headerTextColor) : '000000',
            titleFontSize: 14,
            titleBold: true
        });

    } catch (error: any) {
        console.error('‚ùå Error exporting Outbound Finished Goods to Excel:', error);
        return ResponseUtils.handleError(res, 'exportAllToExcel', error.message, 'exporting outbound finished goods');
    }
};

