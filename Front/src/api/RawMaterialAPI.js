import { GlobalVar } from "../common/GlobalVar";
import ApiProvider from "./ApiProvider";
import ApiResponse from "../common/ApiResponse";
import * as XLSX from "xlsx";
class RawAPI {
  static async fetchData(endpoint, method = "GET", data = null) {
    try {
      const token = GlobalVar.getToken();
      if (!token) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "Token not found in GlobalVar",
          data: null,
          error: "Token not found in GlobalVar",
        });
      }

      const options = {
        method,
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: data ? JSON.stringify(data) : null,
      };

      const apiResponse = await ApiProvider.request(endpoint, options);
      return new ApiResponse({
        isCompleted: apiResponse.isCompleted,
        isError: apiResponse.isError,
        message: apiResponse.message,
        data: apiResponse.data,
        error: apiResponse.error,
      });
    } catch (error) {
      console.error(
        `Error ${method} request to ${endpoint}:`,
        error.response ? error.response.data : error.message || error
      );
      return new ApiResponse({
        isCompleted: false,
        isError: true,
        message: error.message || `Error ${method} request to ${endpoint}`,
        data: null,
        error: error.message || `Error ${method} request to ${endpoint}`,
      });
    }
  }



  static async getRawAll() {
    try {
      const token = GlobalVar.getToken();
      const endpoint = "/api/raw-material-type/get-all";

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.getData(endpoint, {}, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in raw-material:", error);
      throw error;
    }
  }

  static async getRawByID(rm_id) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = `/api/raw-material-type/get-by-id/${rm_id}`;

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.getData(endpoint, {}, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in get raw-material:", error);
      throw error;
    }
  }

  static async createRaw(payload) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = "/api/raw-material-type/create";

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.postData(endpoint, payload, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in create raw-material:", error);
      throw error;
    }
  }

  static async updateRaw(rm_id, formData) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = `/api/raw-material-type/update/${rm_id}`;

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.putData(endpoint, formData, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in update raw-material:", error);
      throw error;
    }
  }

  static async deleteRaw(rm_id) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = `/api/raw-material-type/delete/${rm_id}`;

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.deleteData(endpoint, {}, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in delete raw-material:", error);
      throw error;
    }
  }


  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö headers
  static validateHeaders(expectedHeaders, actualHeaders) {
    // ‡∏Å‡∏£‡∏≠‡∏á header ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" ‡∏≠‡∏≠‡∏Å
    const filteredExpected = expectedHeaders.filter(header => header.trim().toLowerCase() !== "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏");
    const filteredActual = actualHeaders.filter(header => header.trim().toLowerCase() !== "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏");

    const normalizedExpectedHeaders = filteredExpected.map(header => header.trim().toLowerCase());
    const normalizedActualHeaders = filteredActual.map(header => header.trim().toLowerCase());

    const matchingHeaders = normalizedExpectedHeaders.filter(header => normalizedActualHeaders.includes(header));

    console.log(`üìå Headers ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ${matchingHeaders.length} headers`, matchingHeaders);
    return matchingHeaders.length >= 2; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ headers ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 7 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  }


  static async importFile(file) {
    try {
      if (!file || !(file instanceof Blob)) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel",
          data: null
        });
      }

      const token = GlobalVar.getToken();
      if (!token) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "Token not found in GlobalVar",
          data: null,
          error: "Token not found in GlobalVar"
        });
      }

      console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", file.name);

      const reader = new FileReader();
      const jsonData = await new Promise((resolve, reject) => {
        reader.onload = (e) => {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: "array" });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          let rows = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          console.log("rows:", rows);

          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤ row ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
          rows = rows.filter(row =>
            row.some(cell => cell !== undefined && cell !== null && cell.toString().trim() !== "")
          );

          if (rows.length < 2) {
            reject("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
          }

          resolve(rows);
        };
        reader.readAsArrayBuffer(file);
      });

      console.log("jsonData:", jsonData);
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö headers
      const actualHeaders = jsonData[0];
      const expectedHeaders = ["‡∏£‡∏´‡∏±‡∏™", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"];

      if (!this.validateHeaders(expectedHeaders, actualHeaders)) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          data: null
        });
      }

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™
      const formattedData = jsonData.slice(1)
        .map(col => ({
          "‡∏£‡∏´‡∏±‡∏™": col[0]?.toString().trim() || "",
          "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": col[1]?.toString().trim() || "",
          "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": col[2]?.toString().trim() || "",
        }))
        .filter(col => col["‡∏£‡∏´‡∏±‡∏™"] !== ""); // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡∏Å

      console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API:", formattedData);

      if (formattedData.length === 0) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå",
          data: null
        });
      }

      // ‚úÖ ‡∏™‡πà‡∏á JSON ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      const endpoint = "/api/raw-material-type/create-json";
      const response = await ApiProvider.postData(endpoint, formattedData, token);
      console.log("üìå API Response:", response);

      return response;
    } catch (error) {
      console.error("Error in Import File Supplier:", error);
      return new ApiResponse({
        isCompleted: false,
        isError: true,
        message: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå",
        data: null
      });
    }
  }





  //Raw Material Data

  static async getRawInfoAll() {
    try {
      const token = GlobalVar.getToken();
      const endpoint = "/api/raw-material-information/get-all";

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.getData(endpoint, {}, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in raw-material:", error);
      throw error;
    }
  }


  static async getRawInfoByID(rmifm_id) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = `/api/raw-material-information/get-by-id/${rmifm_id}`;

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.getData(endpoint, {}, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in get raw-material:", error);
      throw error;
    }
  }

  static async createRawInfo(payload) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = "/api/raw-material-information/create";

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.postData(endpoint, payload, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in create raw-material:", error);
      throw error;
    }
  }

  static async updateRawInfo(rmifm_id, formData) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = `/api/raw-material-information/update/${rmifm_id}`;

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.putData(endpoint, formData, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in update raw-material:", error);
      throw error;
    }
  }

  static async deleteRawInfo(rmifm_id) {
    try {
      const token = GlobalVar.getToken();
      const endpoint = `/api/raw-material-information/delete/${rmifm_id}`;

      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÅ‡∏•‡∏∞ endpoint
      const response = await ApiProvider.deleteData(endpoint, {}, token);
      console.log("API Response:", response);

      return response; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("Error in delete raw-material:", error);
      throw error;
    }
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö headers
  static validateHeadersinfo(expectedHeaders, actualHeaders) {
    const normalizedExpectedHeaders = expectedHeaders.map(header => header.trim().toLowerCase());
    const normalizedActualHeaders = actualHeaders.map(header => header.trim().toLowerCase());

    const matchingHeaders = normalizedExpectedHeaders.filter(header => normalizedActualHeaders.includes(header));
    console.log(`üìå Headers ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: ${matchingHeaders.length} headers`, matchingHeaders);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ header ‡∏ï‡∏£‡∏á‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    return matchingHeaders.length === normalizedExpectedHeaders.length;
  }


  static async importFileInfo(file) {
    try {
      if (!file || !(file instanceof Blob)) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel",
          data: null
        });
      }

      const token = GlobalVar.getToken();
      if (!token) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "Token not found in GlobalVar",
          data: null,
          error: "Token not found in GlobalVar"
        });
      }

      console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", file.name);

      const reader = new FileReader();
      const jsonData = await new Promise((resolve, reject) => {
        reader.onload = (e) => {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: "array" });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          let rows = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
          console.log("rows:", rows);

          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤ row ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
          rows = rows.filter(row =>
            row.some(cell => cell !== undefined && cell !== null && cell.toString().trim() !== "")
          );

          if (rows.length < 2) {
            reject("‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
          }

          resolve(rows);
        };
        reader.readAsArrayBuffer(file);
      });

      console.log("jsonData:", jsonData);
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö headers
      const actualHeaders = jsonData[0];
      const expectedHeaders = [
        "‡∏£‡∏´‡∏±‡∏™",
        "‡∏ä‡∏∑‡πà‡∏≠", 
        "‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
        "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á",
        "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á",
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß",
        "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß",
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤",
        "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤",
        "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
      ];

      if (!this.validateHeadersinfo(expectedHeaders, actualHeaders)) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          data: null
        });
      }

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™
      const formattedData = jsonData.slice(1)
        .map(col => ({
          "‡∏£‡∏´‡∏±‡∏™": col[0]?.toString().trim() || "",
          "‡∏ä‡∏∑‡πà‡∏≠": col[1]?.toString().trim() || "",
          "‡πÄ‡∏Å‡∏ì‡∏ë‡πå": col[2]?.toString().trim() || "",
          "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": col[3]?.toString().trim() || "",
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á": col[4]?.toString().trim() || "",
          "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á": col[5]?.toString().trim() || "",
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß": col[6]?.toString().trim() || "",
          "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß": col[7]?.toString().trim() || "",
          "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤": col[8]?.toString().trim() || "",
          "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤": col[9]?.toString().trim() || "",
          "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å": col[10]?.toString().trim() || "",
          "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å": col[11]?.toString().trim() || "",
          "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": col[12]?.toString().trim() || "",
        }))
        .filter(col => col["‡∏£‡∏´‡∏±‡∏™"] !== ""); // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡∏Å

      console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API:", formattedData);

      if (formattedData.length === 0) {
        return new ApiResponse({
          isCompleted: false,
          isError: true,
          message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå",
          data: null
        });
      }

      // ‚úÖ ‡∏™‡πà‡∏á JSON ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      const endpoint = "/api/raw-material-information/create-json";
      const response = await ApiProvider.postData(endpoint, formattedData, token);
      console.log("üìå API Response:", response);

      return response;
    } catch (error) {
      console.error("Error in Import File Supplier:", error);
      return new ApiResponse({
        isCompleted: false,
        isError: true,
        message: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå",
        data: null
      });
    }
  }










}

export default RawAPI;