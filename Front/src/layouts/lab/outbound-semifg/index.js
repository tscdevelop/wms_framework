import React, { useState, useEffect } from "react";
import { Box, Grid, Card } from "@mui/material";
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import ButtonComponent from "../components/ButtonComponent";
import SweetAlertComponent from "../components/sweetAlert";
import TableComponent from "../components/table_component";
import { useNavigate } from "react-router-dom";
import OutBoundSemiFGAPI from "api/OutBoundSemiFGAPI";
import TransactionAPI from "api/TransactionLogAPI";
import { GlobalVar } from "../../../common/GlobalVar";
import PrintSemiFgWDComponent from "../components/outbound_semifg_withdraw";
import PrintSemiShipComponent from "../components/outbound_semifg_shipment";

const OutboundSemiFG = () => {
         // eslint-disable-next-line no-unused-vars
  const [loading, setLoading] = useState(true);
  const [outboundAll, setOutboundAll] = useState([]); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const [alert, setAlert] = useState({
    show: false,
    type: "success",
    title: "",
    message: "",
  });
  const [confirmAlert, setConfirmAlert] = useState(false);
  const [deleteCode, setDeleteCode] = useState(""); // ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
  const [role, setRole] = useState("");
  const [selectedOutbSemiId, setSelectedOutbSemiId] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö outbsemi_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [selectedOutbSemiReturned, setSelectedOutbSemiReturned] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á outbsemi_is_returned

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PrintSemiFgWDComponent
  const [printModalOpen, setPrintModalOpen] = useState(false); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Modal

  //  ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PrintSemiShipComponent
  const [printShipModalOpen, setPrintShipModalOpen] = useState(false);

  useEffect(() => {
    const userRole = GlobalVar.getRole(); // ‚úÖ ‡∏î‡∏∂‡∏á Role ‡∏à‡∏≤‡∏Å GlobalVar
    setRole(userRole);
  }, []);

  const fetchDataAll = async () => {
    try {
      const response = await OutBoundSemiFGAPI.getOutbSemiAll();
      console.log("factory All :", response);

      if (response.isCompleted) {
        const data = response.data;
        setOutboundAll(data);
      }
    } catch (error) {
      console.error("Error fetching  data : ", error);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    fetchDataAll();
  }, []);

  const navigate = useNavigate();
  const handleAdd = () => {
    navigate("/outboundSemiFG-create");
  };

  const handleEdit = (outbsemi_id) => {
    navigate(`/outboundSemiFG-create?outbsemi_id=${outbsemi_id}`); // ‡∏™‡πà‡∏á inbrm_id ‡∏ú‡πà‡∏≤‡∏ô query string
  };

  const handleDelete = async () => {
    try {
      

      // üîπ Fetch the data before deletion to log details
      const responseGet = await OutBoundSemiFGAPI.getOutBoundSemiByID(deleteCode);
      if (!responseGet.isCompleted) {
        console.error("‚ùå Failed to fetch data before deletion.");
        return;
      }

      const deletedData = responseGet.data;

      // üîπ Call API to delete the record
      const responseDelete = await OutBoundSemiFGAPI.deleteOutBoundSemi(deleteCode);
      if (responseDelete.isCompleted) {
        // ‚úÖ Prepare Transaction Log
        const logPayload = {
          log_type: "OUTBOUND",
          log_ctgy: "SEMI",
          log_action: "DELETED",
          ref_id: deletedData.outbsemi_id || deleteCode,
          transaction_data: {
            outbsemi_code: deletedData.outbsemi_code || "",
            outbsemi_details: deletedData.outbsemi_details || "",
            outbsemi_appr_status: deletedData.outbsemi_appr_status || "",
            outbsemiitm_withdr_status: deletedData.outbsemiitm_withdr_status || "",
            outbsemiitm_shipmt_status: deletedData.outbsemiitm_shipmt_status || "",
            withdr_date: deletedData.withdr_date || null,
            withdr_time: deletedData.withdr_time || null,
            shipmt_date: deletedData.shipmt_date || null,
            shipmt_time: deletedData.shipmt_time || null,
            delay_days: deletedData.delay_days || null,
          },
        };

        console.log("üìå Transaction Log Payload:", logPayload);
        await TransactionAPI.createLog(logPayload);

        setAlert({
          show: true,
          type: "success",
          title: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          message: responseDelete.message,
        });

        await fetchDataAll(); // ‚úÖ Refresh data list
      } else {
        setAlert({
          show: true,
          type: "error",
          title: "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          message: responseDelete.message,
        });
      }
    } catch (error) {
      console.error("‚ùå Error during delete operation:", error);
      setAlert({
        show: true,
        type: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏î‡πâ",
      });
    } finally {
      setConfirmAlert(false); // ‚úÖ Hide confirmation dialog
      setLoading(false); // ‚úÖ Hide loading state
    }
  };

  const getStatusBadge = (status) => {
    let badgeColor;
    let badgeContent;
    if (status === "APPROVED") {
      badgeColor = "#28a745"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      badgeContent = "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
    } else if (status === "PENDING") {
      badgeColor = "#fd7e14"; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
      badgeContent = "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
    } else if (status === "REJECTED") {
      badgeColor = "#dc3545"; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      badgeContent = "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
    } else {
      badgeColor = "#6c757d"; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      badgeContent = status;
    }
    return (
      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        style={{
          width: "100%",
          color: badgeColor,
          fontWeight: "bold",
          fontSize: "14px",
        }}
      >
        {badgeContent}
      </Box>
    );
  };

  const getStatusWithDrawBadge = (status) => {
    let badgeColor;
    let badgeContent;
    if (status === "COMPLETED") {
      badgeColor = "#28a745"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      badgeContent = "‡πÄ‡∏ö‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
    } else if (status === "PENDING") {
      badgeColor = "#dc3545"; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      badgeContent = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ö‡∏¥‡∏Å";
    } else if (status === "PARTIAL") {
      badgeColor = "#fd7e14"; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
      badgeContent = "‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö";
    } else {
      badgeColor = "#6c757d"; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      badgeContent = status;
    }
    return (
      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        style={{
          width: "100%",
          color: badgeColor,
          fontWeight: "bold",
          fontSize: "14px",
        }}
      >
        {badgeContent}
      </Box>
    );
  };

  const getStatusSendBadge = (status) => {
    let badgeColor;
    let badgeContent;
    if (status === "COMPLETED") {
      badgeColor = "#28a745"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      badgeContent = "‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
    } else if (status === "PENDING") {
      badgeColor = "#dc3545"; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á
      badgeContent = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á";
    } else if (status === "PARTIAL") {
      badgeColor = "#fd7e14"; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
      badgeContent = "‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö";
    } else {
      badgeColor = "#6c757d"; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      badgeContent = status;
    }

    return (
      <Box
        display="flex"
        alignItems="center"
        justifyContent="center"
        style={{
          width: "100%", // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
          color: badgeColor, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          fontWeight: "bold", // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤
          fontSize: "14px", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        }}
      >
        {badgeContent}
      </Box>
    );
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleBarcodeClick ‡∏™‡πà‡∏á id ‡πÑ‡∏õ‡∏¢‡∏±‡∏á component ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  const handleBarcodeClick = (outbsemi_id) => {
    const rowData = outboundAll.find((item) => item.outbsemi_id === outbsemi_id);
    if (rowData) {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á props
      setSelectedOutbSemiId(rowData.outbsemi_id);
      setSelectedOutbSemiReturned(rowData.outbsemi_is_returned);

      // ‡∏ñ‡πâ‡∏≤ outbsemi_is_returned ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î PrintSemiFgWDComponent
      if (rowData.outbsemi_is_returned === 1) {
        setPrintModalOpen(true);
      }
      // ‡∏ñ‡πâ‡∏≤ outbsemi_is_returned ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î PrintSemiShipComponent
      else if (rowData.outbsemi_is_returned === 0) {
        setPrintShipModalOpen(true);
      }
    }
  };

  const [searchFilters, setSearchFilters] = useState({});

  const handleExport = async () => {
    try {
      setLoading(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
      const response = await OutBoundSemiFGAPI.ExportOutbSemiFG(searchFilters); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API

      if (response.isCompleted) {
        return;
      }
    } catch (error) {
      console.error("‚ùå Error during export:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox p={2}>
        <MDBox mt={2} ml={5}>
          <MDTypography variant="h3" color="dark" fontWeight="bold">
            Outbound / ‡πÄ‡∏ö‡∏¥‡∏Å Semi FG
          </MDTypography>
        </MDBox>

        <MDBox mt={5}>
          <Card>
            <MDBox mt={3} p={3}>
              <Grid container spacing={2} justifyContent="flex-end">
                <Grid item>
                  <ButtonComponent type="waybill" onClick={handleAdd} />
                </Grid>
                <Grid item>
                  <ButtonComponent type="export" onClick={handleExport} />
                </Grid>
              </Grid>
            </MDBox>

            <MDBox p={5}>
              <Card>
                <TableComponent
                  columns={[
                    { field: "formatted_date", label: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", width: "10%" },
                    { field: "create_time", label: "‡πÄ‡∏ß‡∏•‡∏≤", width: "10%" },
                    { field: "outbsemi_code", label: "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å", width: "15%" },
                    { field: "outbsemi_details", label: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", width: "30%" },
                    {
                      field: "outbsemi_appr_status",
                      label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
                      width: "10%",
                      render: (row) => (
                        <Box display="flex" justifyContent="center" alignItems="center">
                          {getStatusBadge(row.outbsemi_appr_status)}
                        </Box>
                      ),
                    },
                    {
                      field: "outbsemiitm_withdr_status",
                      label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å",
                      width: "10%",
                      render: (row) => (
                        <Box display="flex" justifyContent="center" alignItems="center">
                          {getStatusWithDrawBadge(row.outbsemiitm_withdr_status)}
                        </Box>
                      ),
                    },
                    {
                      field: "outbsemiitm_shipmt_status",
                      label: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
                      width: "10%",
                      render: (row) => (
                        <Box display="flex" justifyContent="center" alignItems="center">
                          {getStatusSendBadge(row.outbsemiitm_shipmt_status)}
                        </Box>
                      ),
                    },
                  ]}
                  showPostActionColumn={true} // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏á Action
                  postActionColumn={{
                    field: "outbsemi_id ",
                    width: "15%",
                    render: (row) => {
                      const bomCode = row.outbsemi_id;
                      return (
                        <a
                          href={`/outboundSemifg-details?outbsemi_id=${encodeURIComponent(
                            bomCode
                          )}`}
                          style={{ textDecoration: "none", color: "blue", fontWeight: "bold" }}
                        >
                          <MDTypography variant="subtitle2" sx={{ color: "blue" }}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</MDTypography>
                        </a>
                      );
                    },
                  }}
                  data={outboundAll}
                  idField="outbsemi_id"
                  onEdit={(id) => {
                    handleEdit(id);
                  }}
                  onDelete={(id) => {
                    setDeleteCode(id);
                    setConfirmAlert(true);
                  }}
                  userRole={role}
                  onPrint={handleBarcodeClick}
                  hiddenActions={["settings", "barcode"]}
                  actionOrder={["print", "edit", "delete"]}
                  searchableColumns={[
                    "formatted_date",
                    "create_time",
                    "outbsemi_code",
                    "outbsemi_details"
                  ]}
                  onFilterChange={setSearchFilters}
                />
              </Card>
            </MDBox>
          </Card>
        </MDBox>

        {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PrintSemiFgWDComponent */}
        <PrintSemiFgWDComponent
          open={printModalOpen}
          onClose={() => {
            setPrintModalOpen(false);
            setSelectedOutbSemiId(null);
            setSelectedOutbSemiReturned(null);
          }}
          outbsemi_id={selectedOutbSemiId}
          outbsemi_is_returned={selectedOutbSemiReturned}
        />

        {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PrintSemiShipComponent */}
        <PrintSemiShipComponent
          open={printShipModalOpen}
          onClose={() => {
            setPrintShipModalOpen(false);
            setSelectedOutbSemiId(null);
            setSelectedOutbSemiReturned(null);
          }}
          outbsemi_id={selectedOutbSemiId}
          outbsemi_is_returned={selectedOutbSemiReturned}
        />

        {confirmAlert && (
          <SweetAlertComponent
            type="warning"
            title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö"
            message="‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
            show={confirmAlert}
            showCancel
            confirmText="‡∏ï‡∏Å‡∏•‡∏á"
            cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
            onConfirm={handleDelete}
            onCancel={() => setConfirmAlert(false)}
          />
        )}
        <SweetAlertComponent
          show={alert.show}
          type={alert.type}
          title={alert.title}
          message={alert.message}
          onConfirm={() => setAlert({ ...alert, show: false })}
        />
      </MDBox>
    </DashboardLayout>
  );
};
export default OutboundSemiFG;
