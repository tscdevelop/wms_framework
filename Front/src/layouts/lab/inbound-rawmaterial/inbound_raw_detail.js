    import React, { useState, useEffect } from "react";
    import { Box, Grid, Card } from "@mui/material";
    import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
    import DashboardNavbar from "examples/Navbars/DashboardNavbar";
    import MDBox from "components/MDBox";
    import MDTypography from "components/MDTypography";
    import ButtonComponent from "../components/ButtonComponent";
    import SweetAlertComponent from "../components/sweetAlert";
    import TableComponent from "../components/table_component";
    import * as lang from "utils/langHelper";
    import { useNavigate } from "react-router-dom";
    import { useLocation } from "react-router-dom";
    import InBoundAPI from "api/InBoundRawAPI";
    import "jspdf-autotable";
    import TransactionAPI from "api/TransactionLogAPI";
    import PrintBarCodeRmModal from "../components/rm_barcode";
    // import roleAPI from "api/RoleAPI";
    import { GlobalVar } from "../../../common/GlobalVar";

    const InboundRawDetails = () => {
    // eslint-disable-next-line no-unused-vars
    const [loading, setLoading] = useState(true);
    const [inboundAll, setInboundAll] = useState([]); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const [alert, setAlert] = useState({
        show: false,
        type: "success",
        title: "",
        message: "",
    });
    const [confirmAlert, setConfirmAlert] = useState(false);
    const [deleteCode, setDeleteCode] = useState(""); // ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö
    const [barcodeModalOpen, setBarcodeModalOpen] = useState(false); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Modal
    const [selectedInbrmId, setSelectedInbrmId] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö inbrm_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    // const [state_menu_id, setStateMenuId] = useState(null);
    const location = useLocation();
    const [role, setRole] = useState("");
    // const [PermissionAction, setPermissionAction] = useState({
    // ACT_EDIT: false,
    // });
    const params = new URLSearchParams(location.search);
    const rmifm_id = params.get("rmifm_id");
    const rm_id = params.get("rm_id");

    useEffect(() => {
        const userRole = GlobalVar.getRole(); // ‚úÖ ‡∏î‡∏∂‡∏á Role ‡∏à‡∏≤‡∏Å GlobalVar
        setRole(userRole);
    }, []);

    // const fetchPermissionAction = async (menuId) => {
    // try {
    //     const apiResponse = await roleAPI.getPermissionAction(menuId);
    //     console.log("fetchPermissionAction -> apiResponse : ", apiResponse);
    //     if (apiResponse.data && apiResponse.data.permission_actions) {
    //     const pmsActData = apiResponse.data.permission_actions;
    //     console.log("fetchPermissionAction -> pmsActData: ", pmsActData);
    //     // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ permission actions ‡∏à‡∏≤‡∏Å API
    //     setPermissionAction(
    //         pmsActData || {
    //         ACT_EDIT: false,
    //         }
    //     );
    //     }
    // } catch (error) {
    //     console.error("Error fetching menu permissions:", error);
    // }
    // };

    // useEffect(() => {
    // console.log("location.state : ", location.state);
    // console.log("location.state.menu_id : ", location.state?.menu_id);
    // if (location.state && location.state.menu_id) {
    //     const menuId = location.state.menu_id;
    //     setStateMenuId(menuId);
    //     fetchPermissionAction(menuId);
    // }
    // }, [location.state]);

    const fetchDataAll = async () => {
        if (!rmifm_id || !rm_id) {
        console.warn("rmifm_id ‡∏´‡∏£‡∏∑‡∏≠ rm_id ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ");
        setLoading(false);
        return;
        }

        try {
        const response = await InBoundAPI.getIbDetaliAll(rmifm_id, rm_id);
        console.log("Inbound Detail Data:", response);

        if (response.isCompleted) {
            setInboundAll(response.data);
        }
        } catch (error) {
        console.error("Error fetching inbound detail data:", error);
        } finally {
        setLoading(false);
        }
    };

    useEffect(() => {
        fetchDataAll();
    }, [rmifm_id, rm_id]);

    const navigate = useNavigate();
    const handleEdit = (inbrm_id) => {
        navigate(`/inboundraw-add?inbrm_id=${inbrm_id}`); // ‡∏™‡πà‡∏á inbrm_id ‡∏ú‡πà‡∏≤‡∏ô query string
    };

    //

    const handleDelete = async () => {
        try {
        

        // üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å getIbDetaliAll
        const responseAll = await InBoundAPI.getIbDetaliAll(rmifm_id, rm_id);
        if (!responseAll.isCompleted || !responseAll.data) {
            return;
        }

        // üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö inbrm_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        const selectedData = responseAll.data.find((item) => item.inbrm_id === deleteCode);
        if (!selectedData) {
            return;
        }

        // üîπ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const responseDelete = await InBoundAPI.deleteInBound(deleteCode);
        if (responseDelete.isCompleted) {
            // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á log payload
            const logPayload = {
            log_type: "INBOUND",
            log_ctgy: "RAW_MATERIAL",
            log_action: "DELETED",
            ref_id: selectedData.inbrm_id,
            transaction_data: {
                rmifm_id: selectedData.rmifm_id,
                rmifm_code: selectedData.rmifm_code,
                rmifm_name: selectedData.rmifm_name,
                rmifm_width: selectedData.rmifm_width,
                rmifm_length: selectedData.rmifm_length,
                rmifm_thickness: selectedData.rmifm_thickness,
                rmifm_weight: selectedData.rmifm_weight,
                inbrm_grade: selectedData.inbrm_grade,
                inbrm_lot: selectedData.inbrm_lot,
                inbrm_code: selectedData.inbrm_code,
                fty_name: selectedData.fty_name,
                wh_name: selectedData.wh_name,
                zn_name: selectedData.zn_name,
                loc_name: selectedData.loc_name,
                inbrm_quantity: selectedData.inbrm_quantity,
            },
            };

            console.log("üìå Transaction Log Payload:", logPayload);
            await TransactionAPI.createLog(logPayload);

            setAlert({
            show: true,
            type: "success",
            title: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            message: responseDelete.message,
            });

            await fetchDataAll(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        } else {
            setAlert({
            show: true,
            type: "error",
            title: "‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            message: responseDelete.message,
            });
        }
        } catch (error) {
        console.error("‚ùå Error during delete operation:", error);
        } finally {
        setConfirmAlert(false); // ‡∏ã‡πà‡∏≠‡∏ô SweetAlert ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        setLoading(false); // ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading
        }
    };

    const handleBarcodeClick = (inbrm_id) => {
        setSelectedInbrmId(inbrm_id); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ inbrm_id
        setBarcodeModalOpen(true); // ‡πÄ‡∏õ‡∏¥‡∏î Modal
    };

    const closeBarcodeModal = () => {
        setBarcodeModalOpen(false); // ‡∏õ‡∏¥‡∏î Modal
        setSelectedInbrmId(null); // ‡∏•‡πâ‡∏≤‡∏á inbrm_id
    };

    const handleReturn = () => {
        navigate("/inbound/inrawmaterial");
    };

    const [searchFilters, setSearchFilters] = useState({});
    // eslint-disable-next-line no-unused-vars
    const [searchValue, setSearchValue] = useState({});

    const handleExport = async () => {
        try {
        setLoading(true); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `inboundAll` ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (inboundAll.length === 0) {
            return;
        }

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `"DD MMM YY"`
        const today = new Date();
        const formattedToday = today.toLocaleDateString("en-GB", {
            day: "2-digit",
            month: "short",
            year: "2-digit",
        });

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `formatted_date` ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const matchingData = inboundAll.some((item) => item.formatted_date === formattedToday);

        if (!matchingData) {
            setAlert({
            show: true,
            type: "warning",
            title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ",
            message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (${formattedToday})`,
            });
            return;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ `formatted_date` ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        const response = await InBoundAPI.ExportDetailsInbRaw(rmifm_id, searchFilters);

        if (!response.isCompleted) {
            setAlert({
            show: true,
            type: "error",
            title: "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            message: response.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå",
            });
            return;
        }

        setAlert({
            show: true,
            type: "success",
            title: "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            message: "‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        });
        } catch (error) {
        console.error("‚ùå Error during export:", error);
        } finally {
        setLoading(false);
        }
    };

    return (
        <DashboardLayout>
        <DashboardNavbar />
        <MDBox p={2}>
            <MDBox mt={2} ml={5}>
            <MDTypography variant="h3" color="dark" fontWeight="bold">
                {lang.msg("title.inrawmaterial")}/ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            </MDTypography>
            </MDBox>

            <MDBox mt={5}>
            <Card>
                <MDBox mt={3} p={3}>
                <Grid container spacing={2} justifyContent="flex-end">
                    <Grid item>
                    <ButtonComponent type="report" onClick={handleExport} />
                    </Grid>
                </Grid>
                </MDBox>

                <MDBox p={5}>
                <Card>
                    <TableComponent
                    columns={[
                        { field: "formatted_date", label: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", width: "10%" },
                        { field: "create_time", label: "‡πÄ‡∏ß‡∏•‡∏≤", width: "10%" },
                        { field: "inbrm_code", label: "‡∏£‡∏´‡∏±‡∏™", width: "10%" },
                        { field: "rmifm_name", label: "‡∏ä‡∏∑‡πà‡∏≠", width: "10%" },
                        {
                        label: "‡∏Ç‡∏ô‡∏≤‡∏î",
                        subColumns: [
                            { field: "rmifm_width", label: "‡∏Å‡∏ß‡πâ‡∏≤‡∏á", width: "5%" },
                            { field: "rmifm_length", label: "‡∏¢‡∏≤‡∏ß", width: "5%" },
                            { field: "rmifm_thickness", label: "‡∏´‡∏ô‡∏≤", width: "5%" },
                            { field: "rmifm_weight", label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", width: "5%" },
                        ],
                        width: "5%",
                        },
                        { field: "inbrm_grade", label: "‡πÄ‡∏Å‡∏£‡∏î" },
                        { field: "inbrm_lot", label: "Lot" },
                        {
                        label: "Store",
                        subColumns: [
                            { field: "fty_name", label: "‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", width: "5%" },
                            { field: "wh_name", label: "‡∏Ñ‡∏•‡∏±‡∏á", width: "5%" },
                            { field: "zn_name", label: "Zone", width: "5%" },
                            { field: "loc_name", label: "Location", width: "5%" },
                        ],
                        width: "5%",
                        },
                        { field: "inbrm_quantity", label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" },
                    ]}
                    data={inboundAll}
                    idField="inbrm_id"
                    onEdit={(id) => {
                        console.log("Edit clicked for ID:", id);
                        handleEdit(id);
                    }}
                    onDelete={(id) => {
                        setDeleteCode(id);
                        setConfirmAlert(true);
                    }}
                    onBarcodeClick={handleBarcodeClick}
                    searchableColumns={[
                        "formatted_date",
                        "create_time",
                        "inbrm_code",
                        "inbrm_quantity",
                        "inbrm_total_weight",
                        "inbrm_grade",
                        "fty_name",
                        "wh_name",
                        "zn_name",
                        "loc_name",
                    ]}
                    userRole={role}
                    hiddenActions={["print", "settings"]}
                    onSearchChange={(val) => setSearchValue(val)} // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    onFilterChange={setSearchFilters} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    actionOrder={["barcode","edit","delete"]}
                    />
                </Card>
                <Box mt={3} display="flex" justifyContent="flex-end">
                    <ButtonComponent
                    type="return"
                    sx={{ px: 4, width: { xs: "100%", sm: "auto" } }}
                    onClick={handleReturn}
                    />
                </Box>
                </MDBox>
            </Card>
            </MDBox>

            <PrintBarCodeRmModal
            open={barcodeModalOpen}
            onClose={closeBarcodeModal}
            inbrm_id={selectedInbrmId}
            />

            {confirmAlert && (
            <SweetAlertComponent
                type="warning"
                title="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö"
                message="‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
                show={confirmAlert}
                showCancel
                confirmText="‡∏ï‡∏Å‡∏•‡∏á"
                cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
                onConfirm={handleDelete}
                onCancel={() => setConfirmAlert(false)}
            />
            )}
            <SweetAlertComponent
            show={alert.show}
            type={alert.type}
            title={alert.title}
            message={alert.message}
            onConfirm={() => setAlert({ ...alert, show: false })}
            />
        </MDBox>
        </DashboardLayout>
    );
    };
    export default InboundRawDetails;
