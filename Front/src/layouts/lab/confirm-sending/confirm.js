import React, { useState, useEffect } from "react";
import { Box, Card, Checkbox, CircularProgress, useMediaQuery, Grid } from "@mui/material";
import { useLocation, useNavigate } from "react-router-dom";
import DashboardLayout from "examples/LayoutContainers/DashboardLayout";
import DashboardNavbar from "examples/Navbars/DashboardNavbar";
import MDBox from "components/MDBox";
import MDTypography from "components/MDTypography";
import OutBoundFGAPI from "api/OutBoundFgAPI";
import MDInput from "components/MDInput";
import SweetAlertComponent from "../components/sweetAlert";
import ButtonComponent from "../components/ButtonComponent";

const borderedContainerStyle = {
  border: "1.5px solid #363636", // ‡∏Ç‡∏≠‡∏ö‡∏´‡∏ô‡∏≤ 2px ‡∏™‡∏µ‡∏î‡∏≥
  borderRadius: "8px", // ‡∏°‡∏∏‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô
  overflowX: "auto", // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
};

const tableStyle = {
  borderCollapse: "collapse",
  width: "100%",
  border: "1px solid #363636",
};

const thStyle = {
  border: "1px solid #363636",
  padding: "3px",
  backgroundColor: "#f2f2f2",
  textAlign: "center",
  width: "200px",
  whiteSpace: "nowrap", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  overflow: "hidden", // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
  textOverflow: "ellipsis",
};

const tdStyle = {
  border: "1px solid #363636",
  padding: "3px",
  textAlign: "center",
  fontSize: "0.85rem",
  width: "500px",
};

const ConfirmWithdraw = () => {

  const location = useLocation();
  const params = new URLSearchParams(location.search);
  const outbfg_id = params.get("outbfg_id");
  const status = params.get("status"); // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ status
  const isViewMode = status === "view"; // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏î‡∏π‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

  const isTablet = useMediaQuery("(max-width: 1024px)");
  const [loading, setLoading] = useState(true);
  const [withdrawData, setWithdrawData] = useState(null);
  const [selectedItems, setSelectedItems] = useState([]);
  const [scanValue, setScanValue] = useState("");
  const [alert, setAlert] = useState({
    show: false,
    type: "success",
    title: "",
    message: "",
  });

  const navigate = useNavigate();

  const fetchWithdrawData = async () => {
    try {
      const response = await OutBoundFGAPI.getOutBoundFGReqByID(outbfg_id);
      if (response.isCompleted) {
        setWithdrawData(response.data);
      }
    } catch (error) {
      console.error("Error fetching data:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (outbfg_id) {
      fetchWithdrawData();
    }
  }, [outbfg_id]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå Scan ‡∏£‡∏´‡∏±‡∏™ FG
  // const handleScanEnter = (e) => {
  //   if (e.key === "Enter") {
  //     e.preventDefault();
  //     let code = scanValue.trim();
  //     if (!code) return;

  //     try {
  //       // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ inbfg_code
  //       const scannedData = JSON.parse(code);
  //       if (scannedData && scannedData.inbfg_code) {
  //         code = scannedData.inbfg_code;
  //       }
  //     } catch (error) {
  //       // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON (‡πÄ‡∏ä‡πà‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏£‡∏á‡πÜ) ‡∏Å‡πá‡πÉ‡∏ä‡πâ code ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
  //     }

  //     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ item ‡∏ó‡∏µ‡πà‡∏°‡∏µ inbfg_code ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ scanValue
  //     const itemIndex = withdrawData.items.findIndex((item) => item.inbfg_code === code);
  //     if (itemIndex === -1) {
  //       setScanValue("");
  //       return;
  //     }
  //     const currentCount = Number(withdrawData.items[itemIndex].outbfgitm_withdr_count) || 0;
  //     const requiredQuantity = Number(withdrawData.items[itemIndex].outbfgitm_quantity) || 0;
  //     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ count ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á
  //     if (currentCount >= requiredQuantity) {
  //       setScanValue("");
  //       return;
  //     }
  //     const newCount = currentCount + 1;

  //     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  //     const updatedItems = [...withdrawData.items];
  //     updatedItems[itemIndex] = {
  //       ...updatedItems[itemIndex],
  //       outbfgitm_withdr_count: newCount,
  //     };
  //     setWithdrawData({
  //       ...withdrawData,
  //       items: updatedItems,
  //     });

  //     // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô selectedItems ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ inbfg_id)
  //     const selectedExists = selectedItems.some(
  //       (selected) => selected.inbfg_id === updatedItems[itemIndex].inbfg_id
  //     );
  //     if (!selectedExists) {
  //       setSelectedItems((prev) => [...prev, { inbfg_id: updatedItems[itemIndex].inbfg_id }]);
  //     }
  //     setScanValue("");
  //   }
  // };



  const handleScanEnter = (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      let scannedCode = scanValue.trim();
      if (!scannedCode) return;

      try {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ code
        const scannedData = JSON.parse(scannedCode);
        if (scannedData && scannedData.code) {
          scannedCode = scannedData.code;
        }
      } catch (error) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON (‡πÄ‡∏ä‡πà‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏£‡∏á‡πÜ) ‡∏Å‡πá‡πÉ‡∏ä‡πâ code ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ inbfg_code (‡∏´‡∏£‡∏∑‡∏≠ code) ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö code ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô
      // ‡πÇ‡∏î‡∏¢ map ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
      const matchingItems = withdrawData.items
        .map((item, index) => ({ ...item, index }))
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å item.inbfg_code ‡πÄ‡∏õ‡πá‡∏ô item.inbfg_code ‡∏´‡∏£‡∏∑‡∏≠ item.code ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
        .filter((item) => item.inbfg_code === scannedCode); // <-- ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô data ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ inbfg_code ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
        // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏ô withdrawData.items ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô code ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô item.code === code

      // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô
      if (matchingItems.length === 0) {
        setScanValue("");
        return;
      }

      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ö‡∏¥‡∏Å)
      const targetItem = matchingItems.find((item) => {
        const currentCount = Number(item.outbfgitm_withdr_count) || 0;
        const requiredQuantity = Number(item.outbfgitm_quantity) || 0;
        return currentCount < requiredQuantity;
      });

      // ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      if (!targetItem) {
        setScanValue("");
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      const itemIndex = targetItem.index;
      const currentCount = Number(withdrawData.items[itemIndex].outbfgitm_withdr_count) || 0;
      const requiredQuantity = Number(withdrawData.items[itemIndex].outbfgitm_quantity) || 0;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô) ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      if (currentCount >= requiredQuantity) {
        setScanValue("");
        return;
      }
      const newCount = currentCount + 1;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      const updatedItems = [...withdrawData.items];
      updatedItems[itemIndex] = {
        ...updatedItems[itemIndex],
        outbfgitm_withdr_count: newCount,
      };
      setWithdrawData({
        ...withdrawData,
        items: updatedItems,
      });

      // üîÅ ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ inbfg_id ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô outbfgitm_id
      const selectedExists = selectedItems.some(
        (selected) => selected.outbfgitm_id === updatedItems[itemIndex].outbfgitm_id
      );

      if (!selectedExists) {
        setSelectedItems((prev) => [
          ...prev,
          { outbfgitm_id: updatedItems[itemIndex].outbfgitm_id },
        ]);
      }

      setScanValue("");
    }
  };

  const handleConfirmWithdraw = async () => {
    if (selectedItems.length === 0) {
      return;
    }

    setLoading(true);
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const payload = {
        items: withdrawData.items
          .filter((item) => selectedItems.some((sel) => sel.outbfgitm_id === item.outbfgitm_id))
          .map((item) => ({
            outbfgitm_id: item.outbfgitm_id, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            inbfg_id: item.inbfg_id,
            outbfgitm_withdr_count: item.outbfgitm_withdr_count,
          })),
      };

      const response = await OutBoundFGAPI.OutBoundFGWithDraw(withdrawData.outbfg_id, payload);
      if (response.isCompleted) {
        setAlert({
          show: true,
          type: "success",
          title: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          message: response.message,
        });
        setTimeout(() => {
          navigate("/confirm");
        }, 1500);
      } else {
        setAlert({
          show: true,
          type: "error",
          title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          message: response.message,
        });
      }

      fetchWithdrawData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    } catch (error) {
      console.error("Error confirming withdrawal:", error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <DashboardNavbar />
        <MDBox p={3} display="flex" justifyContent="center">
          <CircularProgress />
        </MDBox>
      </DashboardLayout>
    );
  }

  if (!withdrawData) {
    return (
      <DashboardLayout>
        <DashboardNavbar />
        <MDBox p={3}>
          <MDTypography variant="h6" color="error">
            ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å
          </MDTypography>
        </MDBox>
      </DashboardLayout>
    );
  }

  const {
    outbfg_code,
    withdr_date,
    outbfg_details,
    outbfg_driver_name,
    outbfg_vehicle_license,
    outbfg_phone,
    outbfg_address,
    tspyard_name,
    items,
  } = withdrawData;

  const handleReturn = () => {
    navigate("/confirm");
  };

  return (
    <DashboardLayout>
      <DashboardNavbar />
      <MDBox p={isTablet ? 1 : 3}>
        <MDTypography variant="h4" fontWeight="bold" gutterBottom>
          {isViewMode ? "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å" : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å"}
        </MDTypography>

        <MDBox mt={3}>
          <Card>
            <MDBox p={{ xs: 2, md: 5 }}>
              <MDBox mt={2}>
                <Grid container alignItems="center">
                  {/* Label: Scan ‡∏£‡∏´‡∏±‡∏™ FG */}
                  <Grid item xs="auto">
                    <MDTypography variant="h6" color="inherit">
                      Scan ‡∏£‡∏´‡∏±‡∏™ FG
                    </MDTypography>
                  </Grid>

                  {/* Input: ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πÅ‡∏Å‡∏ô‡∏£‡∏´‡∏±‡∏™ */}
                  <Grid item xs={8} sm={6} md={4}>
                    <MDInput
                      autoFocus={!isViewMode}
                      name="scan_fg"
                      variant="outlined"
                      value={scanValue}
                      onChange={(e) => setScanValue(e.target.value)}
                      onKeyDown={handleScanEnter}
                      sx={{ width: "300px", maxWidth: "100%", ml: 3 }}
                      disabled={isViewMode}
                      placeholder="‡∏™‡πÅ‡∏Å‡∏ô‡∏£‡∏´‡∏±‡∏™ FG "
                    />
                  </Grid>
                </Grid>
              </MDBox>

              {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å */}
              <MDBox mt={2} style={borderedContainerStyle}>
                <table style={tableStyle}>
                  <tbody>
                    <tr>
                      <th style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏ô‡∏≥‡∏™‡πà‡∏á
                        </MDTypography>
                      </th>
                      <td style={tdStyle}>{outbfg_code || "-"}</td>
                      <th style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                        </MDTypography>
                      </th>
                      <td style={tdStyle}>{withdr_date || "-"}</td>
                      <th style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                        </MDTypography>
                      </th>
                      <td style={tdStyle}>{outbfg_details || "-"}</td>
                    </tr>
                  </tbody>
                </table>
              </MDBox>

              {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
              <MDBox mt={3} style={borderedContainerStyle}>
                <Box sx={{ overflowX: "auto" }}>
                  <table style={tableStyle}>
                    <thead>
                      <tr>
                        <th style={thStyle} rowSpan={2}>
                          <MDTypography variant="h6" color="inherit">
                            Select
                          </MDTypography>
                        </th>
                        <th style={thStyle} rowSpan={2}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏£‡∏´‡∏±‡∏™
                          </MDTypography>
                        </th>
                        <th style={thStyle} rowSpan={2}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏ä‡∏∑‡πà‡∏≠
                          </MDTypography>
                        </th>
                        <th style={thStyle} colSpan={3}>
                          <MDTypography variant="h6" fontWeight="bold">
                            ‡∏Ç‡∏ô‡∏≤‡∏î
                          </MDTypography>
                        </th>
                        <th style={thStyle} rowSpan={2}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á
                          </MDTypography>
                        </th>
                        <th style={thStyle} rowSpan={2}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ
                          </MDTypography>
                        </th>
                        <th style={thStyle} rowSpan={2}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                          </MDTypography>
                        </th>
                      </tr>
                      <tr>
                        <th style={thStyle}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                          </MDTypography>
                        </th>
                        <th style={thStyle}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏¢‡∏≤‡∏ß
                          </MDTypography>
                        </th>
                        <th style={thStyle}>
                          <MDTypography variant="h6" color="inherit">
                            ‡∏´‡∏ô‡∏≤
                          </MDTypography>
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {items.map((item, index) => {
                        const currentCount = Number(item.outbfgitm_withdr_count) || 0;
                        const requiredQuantity = Number(item.outbfgitm_quantity) || 0;
                        const isComplete = currentCount === requiredQuantity;
                        return (
                          <tr key={index}>
                            <td style={tdStyle}>
                              <Checkbox
                                checked={selectedItems.some(
                                  (selected) => selected.outbfgitm_id === item.outbfgitm_id
                                )}
                                disabled
                              />
                            </td>
                            <td style={tdStyle}>{item.inbfg_code || "-"}</td>
                            <td style={tdStyle}>{item.fgifm_name || "-"}</td>
                            <td style={tdStyle}>{item.fgifm_width || "-"}</td>
                            <td style={tdStyle}>{item.fgifm_length || "-"}</td>
                            <td style={tdStyle}>{item.fgifm_thickness || "-"}</td>
                            <td style={tdStyle}>{item.outbfgitm_quantity || "-"}</td>
                            <td style={tdStyle}>{item.outbfgitm_withdr_count || "-"}</td>
                            <td
                              style={{
                                ...tdStyle,
                                background: isComplete ? "#C8E6C9" : "#FFE0B2",
                              }}
                            >
                              {isComplete ? "‡∏Ñ‡∏£‡∏ö" : "‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö"}
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </Box>
              </MDBox>

              <MDBox mt={2}>
                <MDTypography variant="h6" color="inherit">
                  ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                </MDTypography>
              </MDBox>

              <MDBox mt={2} style={borderedContainerStyle}>
                <table style={tableStyle}>
                  <tbody>
                    <tr>
                      <th style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
                        </MDTypography>
                      </th>
                      <td style={tdStyle}>{outbfg_driver_name || "-"}</td>
                      <th style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
                        </MDTypography>
                      </th>
                      <td style={tdStyle}>{outbfg_vehicle_license || "-"}</td>
                    </tr>
                  </tbody>
                </table>
              </MDBox>

              <MDBox mt={3} style={borderedContainerStyle}>
                <table style={tableStyle}>
                  <tbody>
                    <tr>
                      <td style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡∏ó‡πà‡∏≤‡∏£‡∏ñ
                        </MDTypography>
                      </td>
                      <td style={tdStyle}>
                        <MDTypography variant="body02">{tspyard_name || "-"}</MDTypography>
                      </td>
                    </tr>
                    <tr>
                      <td style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
                        </MDTypography>
                      </td>
                      <td style={tdStyle}>
                        <MDTypography variant="body02">{outbfg_phone || "-"}</MDTypography>
                      </td>
                    </tr>
                    <tr>
                      <td style={thStyle}>
                        <MDTypography variant="h6" color="inherit">
                          ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
                        </MDTypography>
                      </td>
                      <td style={tdStyle}>
                        <MDTypography variant="body02">{outbfg_address || "-"}</MDTypography>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </MDBox>

              {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô */}
              <Box display="flex" justifyContent={isTablet ? "center" : "flex-end"} mt={3} gap={2}>
                <ButtonComponent
                  type="return"
                  onClick={handleReturn}
                  sx={{ width: isTablet ? "100%" : "150px" }}
                />

                {!isViewMode && (
                  <ButtonComponent
                    type="ConfirmWithdraw"
                    onClick={handleConfirmWithdraw}
                    disabled={loading}
                  />
                )}
              </Box>
            </MDBox>
          </Card>
        </MDBox>
      </MDBox>
      <SweetAlertComponent
        show={alert.show}
        type={alert.type}
        title={alert.title}
        message={alert.message}
        onConfirm={() => setAlert({ ...alert, show: false })}
      />
    </DashboardLayout>
  );
};

export default ConfirmWithdraw;
